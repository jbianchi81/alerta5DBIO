# yaml-language-server: $schema=https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/schemas/v3.1/schema.json
---
openapi: 3.1.0
info:
  version: 1.0.0
  title: API JSON de consulta y gestión de la base de datos hidrometeorológica alerta5
  description: 'sim: funciones CRUD sobre los registros de simulación. accessors:
    funciones de acceso a recursos externos y actualización de la db'
servers:
- url: "http://localhost:3005"
  description: local deployment for testing
- url: ".."
  description: relative url
# consumes:
# - application/json
# produces:
# - application/json
paths:
  "/login":
    post:
      summary: login endpoint
      # nickname: login
      parameters:
      - name: username
        required: true
        schema: { "type": "string"} 
        in: query
      - name: password
        required: true
        schema: { "type": "string", "format": "password"}
        in: query
      responses:
        '200':
          description: login correct
        '400':
          description: login incorrect
  "/logout":
    post:
      summary: logout endpoint
      # nickname: logout
      responses:
        '200':
          description: logout correct
        '400':
          description: logout incorrect
  "/sim/modelos":
    get:
      summary: Da el listado de modelos disponibles opcionalmente filtrado por name_contains
        (string matching) o tipo
      # nickname: getModelos
      security:
      - cookieAuth: []
      parameters:
      - name: name_contains
        description: nombre del modelo parcial o completo
        required: false
        schema: { "type": "string"} 
        in: query
      - name: type
        description: tipo de modelo
        required: false
        schema: { "type": "string"} 
        in: query
      responses:
        '200':
          description: OK
          schema:
            "$ref": "#/components/schemas/ArrayOfModelos"
        '400':
          description: Bad request
        '404':
          description: Not found
  "/sim/modelos/{id}":
    get:
      summary: Da el modelo correspondiente al id ingresado
      # nickname: getModelByID
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id del modelo
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Modelo"
        '400':
          description: Bad request
        '404':
          description: Modelo with the specified id not found
  "/sim/calibrados":
    get:
      summary: Da el listado de configuraciones de modelos activos disponibles ('calibrados')
        opcionalmente filtrado por name_contains, estacion_id, var_id, includeCorr,
        timestart, timeend, o model_id
      # nickname: getCalibrados
      security:
      - cookieAuth: []
      parameters:
      - name: name_contains
        description: nombre parcial o completo del calibrado
        required: false
        schema: { "type": "string"} 
        in: query
      - name: estacion_id
        description: id de estación del output del calibrado
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: var_id
        description: id de variable del output del calibrado
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: includeCorr
        description: si se debe incluir la última corrida del calibrado
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: timestart
        description: fecha inicial de las series temporales simuladas
        required: false
        schema: {"type": "string", "format": "date-time"}
        in: query
      - name: timeend
        description: fecha final de las series temporales simuladas
        required: false
        schema: {"type": "string", "format": "date-time"}
        in: query
      - name: model_id
        description: id de modelo del calibrado
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Calibrado"
        '400':
          description: Bad request
    post:
      summary: Crea o actualiza una configuración de modelo ('calibrado') con los
        parámetros provistos. Para actualizar un calibrado existente, proveer id
      # nickname: postCalibrados
      security:
      - cookieAuth: []
      requestBody:
        description: Un objeto Calibrado describiendo la configuración del modelo
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calibrado"
      responses:
        '201':
          description: Calibrado creado o actualizado
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calibrado"
        '400':
          description: Bad request
        '401':
          description: Authorization required
  "/sim/calibrados/{id}":
    get:
      summary: Da la configuración del modelo ('calibrado') seleccionado mediante
        id
      # nickname: getCalibradosByID
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calibrado"
        '400':
          description: Bad request
        '404':
          description: No se encontró Calibrado con el id indicado
    put:
      summary: actualiza configuración del modelo ('calibrado') con los parámetros
        provistos
      # nickname: updateCalibrados
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      requestBody:
        description: Un objeto Calibrado describiendo la configuración del modelo
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Calibrado"
      responses:
        '201':
          description: Calibrado actualizado
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calibrado"
        '400':
          description: Bad request
        '401':
          description: Authorization required
    delete:
      summary: elimina configuración del modelo ('calibrado') del id indicado
      # nickname: deleteCalibrado
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      responses:
        '204':
          description: Calibrado eliminado
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Calibrado"
        '400':
          description: Bad request
        '401':
          description: Authorization required
        '404':
          description: No se encontró Calibrado con el id indicado
  "/sim/calibrados/{cal_id}/corridas":
    get:
      summary: Da listado de corridas del calibrado correspondiente al cal_id dado,
        opcionalmente filtrado por  forecast_timestart y forecast_timeend, estacion_id
        y/o var_id del output y/o filtrando las series temporales con las fechas dadas
        por timestart y timeend
      # nickname: getCorridas
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: forecast_timestart
        description: fecha de emisión inicial
        schema: { "type": "string"} 
        required: false
        in: query
      - name: forecast_timeend
        description: fecha de emisión final
        schema: { "type": "string"} 
        required: false
        in: query
      - name: forecast_date
        description: fecha de emisión
        schema: { "type": "string"} 
        required: false
        in: query
      - name: series_id
        description: id de serie del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: estacion_id
        description: id de estación del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: var_id
        description: id de variable del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: timestart
        description: fecha inicial de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: timeend
        description: fecha final de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: qualifier
        description: calificador opcional para diferenciar subseries
        schema: { "type": "string"} 
        required: false
        in: query
      - name: includeProno
        description: si debe incluir series temporales simuladas
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: true
      - name: series_metadata
        description: si debe incluir metadatos de las series
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: false
      - name: group_by_qualifier
        description: si debe separar las series según qualifier
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: false
      - name: model_id
        description: id de modelo
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: tipo
        description: "tipo de serie: puntual o areal"
        schema: { "type": "string"} 
        required: false
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Corrida"
        '400':
          description: Bad request
        '404':
          description: No se encontraron Corridas para los parámetros especificados
    post:
      summary: crea o actualiza una corrida del calibrado correspondiente al cal_id
        dado, con los datos provistos en el cuerpo de la petición
      # nickname: postCorrida
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      requestBody:
        description: Un objeto Corrida que contiene las series temporales simuladas
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Corrida"
      responses:
        '201':
          description: Corrida creada o actualizada
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Corrida"
        '400':
          description: Bad request
  "/sim/calibrados/{cal_id}/corridas/{id}":
    get:
      summary: Da la corrida del calibrado correspondiente al cal_id e id dados, opcionalmente
        filtrado por estacion_id y/o var_id del output y/o filtrando las series temporales
        con las fechas dadas por timestart y timeend
      # nickname: getCorrida
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: id
        description: identificador único de la corrida
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: estacion_id
        description: id de estación del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: var_id
        description: id de variable del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: timestart
        description: fecha inicial de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: timeend
        description: fecha final de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: qualifier
        description: calificador opcional para diferenciar subseries
        schema: { "type": "string"} 
        required: false
        in: query
      - name: includeProno
        description: si debe incluir series temporales simuladas
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: true
      - name: series_id
        description: id de serie
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: series_metadata
        description: si debe incluir metadatos de las series
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Corrida"
        '400':
          description: Bad request
        '404':
          description: No se encontró Corrida con el id especificado
    put:
      summary: actualiza corrida del calibrado correspondiente al cal_id e id dados,
        con los datos provistos en el cuerpo de la petición
      # nickname: putCorrida
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: id
        description: identificador único de la corrida
        schema: { "type": "integer"} 
        required: true
        in: path
      requestBody:
        description: Un objeto Corrida que contiene las series temporales simuladas
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Corrida"
      responses:
        '201':
          description: Corrida actualizada
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Corrida"
        '400':
          description: Bad request
        '404':
          description: No se encontró Corrida con el id indicado
    delete:
      summary: elimina corrida del calibrado correspondiente al cal_id e id dados
      # nickname: deleteCorrida
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: id
        description: identificador único de la corrida
        schema: { "type": "integer"} 
        required: true
        in: path
      responses:
        '204':
          description: Corrida eliminada
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Corrida"
        '400':
          description: Bad request
        '404':
          description: No se encontró Corrida con el id indicado
  "/sim/calibrados/{cal_id}/corridas/last":
    get:
      summary: Da la última corrida del calibrado correspondiente al cal_id dado,
        opcionalmente filtrado por estacion_id y/o var_id del output y/o filtrando
        las series temporales con las fechas dadas por timestart y timeend
      # nickname: getLastCorrida
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: estacion_id
        description: id de estación del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: var_id
        description: id de variable del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: timestart
        description: fecha inicial de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: timeend
        description: fecha final de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: qualifier
        description: calificador opcional para diferenciar subseries
        schema: { "type": "string"} 
        required: false
        in: query
      - name: includeProno
        description: si debe incluir series temporales simuladas
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: true
      - name: series_metadata
        description: si debe incluir metadatos de las series
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Corrida"
        '400':
          description: Bad request
        '404':
          description: No se encontró última Corrida para el cal_id indicado
  "/sim/calibrados/{cal_id}/corridas_guardadas":
    get:
      summary: Da listado de corridas guardadas del calibrado correspondiente al cal_id
        dado, opcionalmente filtrado por  forecast_timestart y forecast_timeend, estacion_id
        y/o var_id del output y/o filtrando las series temporales con las fechas dadas
        por timestart y timeend
      # nickname: getCorridasGuardadas
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: forecast_timestart
        description: fecha de emisión inicial
        schema: { "type": "string"} 
        required: false
        in: query
      - name: forecast_timeend
        description: fecha de emisión final
        schema: { "type": "string"} 
        required: false
        in: query
      - name: estacion_id
        description: id de estación del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: var_id
        description: id de variable del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: timestart
        description: fecha inicial de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: timeend
        description: fecha final de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: qualifier
        description: calificador opcional para diferenciar subseries
        schema: { "type": "string"} 
        required: false
        in: query
      - name: includeProno
        description: si debe incluir series temporales simuladas
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: true
      - name: series_metadata
        description: si debe incluir metadatos de las series
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Corrida"
        '400':
          description: Bad request
        '404':
          description: No se encontraron Corridas para los parámetros especificados
  "/sim/calibrados/{cal_id}/corridas_guardadas/{id}":
    get:
      summary: Da la corrida guardada del calibrado correspondiente al cal_id e id
        dados, opcionalmente filtrado por estacion_id y/o var_id del output y/o filtrando
        las series temporales con las fechas dadas por timestart y timeend
      # nickname: getCorrida
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: id
        description: identificador único de la corrida
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: estacion_id
        description: id de estación del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: var_id
        description: id de variable del output
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: timestart
        description: fecha inicial de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: timeend
        description: fecha final de series temporales
        schema: { "type": "string"} 
        required: false
        in: query
      - name: qualifier
        description: calificador opcional para diferenciar subseries
        schema: { "type": "string"} 
        required: false
        in: query
      - name: includeProno
        description: si debe incluir series temporales simuladas
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: true
      - name: series_id
        description: id de serie
        schema: { "type": "integer"} 
        required: false
        in: query
      - name: series_metadata
        description: si debe incluir metadatos de las series
        schema: { "type": "boolean"} 
        required: false
        in: query
        example: false
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Corrida"
        '400':
          description: Bad request
        '404':
          description: No se encontró Corrida con el id especificado
  "/sim/calibrados/{cal_id}/forzantes":
    get:
      summary: Da las forzantes del calibrado indicado
      # nickname: getForzantes
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Forzante"
            text/csv:
              schema:
                schema: { "type": "string"} 
                example: |2-
                   #cal_id: 1

                   1,1244,series
                  2,2348,series_areal
                  3,4578,series_areal
        '400':
          description: Bad request
        '404':
          description: No se encontraron Forzantespara el cal_id indicado
    post:
      summary: Inserta o actualiza las forzantes del calibrado indicado
      # nickname: upsertForzantes
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      requestBody:
        description: Un array de objetos Forzante que define las forzantes del calibrado
          indicado
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                "$ref": "#/components/schemas/Forzante"
      responses:
        '200':
          description: OK
          content:
            application/json:
              type: array
              items:
                "$ref": "#/components/schemas/Forzante"
        '400':
          description: Bad request
        '401':
          description: Authorization required
        '404':
          description: No se encontraron Forzantes para el cal_id indicado
    delete:
      summary: Elimina las forzantes del calibrado indicado
      # nickname: deleteForzantes
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      responses:
        '204':
          description: Forzantes eliminadas
          content:
            application/json:
              schema: 
                type: array
                items:
                  "$ref": "#/components/schemas/Forzante"
        '400':
          description: Bad request
        '401':
          description: Authorization required
        '404':
          description: No se encontraron Forzantes para el cal_id indicado
  "/sim/calibrados/{cal_id}/forzantes/{orden}":
    get:
      summary: Da la forzante del cal_id y orden indicados
      # nickname: getForzante
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: orden
        description: número de orden de la forzante
        schema: { "type": "integer"} 
        required: true
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Forzante"
        '400':
          description: Bad request
        '404':
          description: No se encontró la Forzante indicada
    put:
      summary: Actualiza la forzante indicada
      # nickname: upsertForzante
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: orden
        description: número de orden de la forzante
        schema: { "type": "integer"} 
        required: true
        in: path
      requestBody:
        description: Un objeto Forzante que define la forzante del calibrado indicado
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Forzante"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Forzante"
        '400':
          description: Bad request
        '401':
          description: Authorization required
        '404':
          description: No se encontró la forzante indicada
    delete:
      summary: Elimina la forzante del calibrado y orden  indicados
      # nickname: deleteForzante
      security:
      - cookieAuth: []
      parameters:
      - name: cal_id
        description: identificador único del calibrado
        schema: { "type": "integer"} 
        required: true
        in: path
      - name: orden
        description: número de orden de la forzante
        schema: { "type": "integer"} 
        required: true
        in: path
      responses:
        '204':
          description: Forzante eliminada
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Forzante"
        '400':
          description: Bad request
        '401':
          description: Authorization required
        '404':
          description: No se encontró la Forzante indicada
  "/accessors":
    get:
      summary: Da el listado de accessors disponibles opcionalmente filtrado por name
      # nickname: getAccessorsList
      security:
      - cookieAuth: []
      parameters:
      - name: name
        description: nombre del accessor
        required: false
        schema: { "type": "string"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Accessor"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/accessors/{name}":
    get:
      summary: Da el accessor correspondiente al parámetro name
      # nickname: getAccessor
      security:
      - cookieAuth: []
      parameters:
      - name: name
        description: nombre del accessor
        required: true
        schema: { "type": "string"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Accessor"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/accessors/{name}/test":
    get:
      summary: Prueba la conexión con el servidor donde se encuentra el recurso
      # nickname: TestAccessor
      security:
      - cookieAuth: []
      parameters:
      - name: name
        description: nombre del accessor
        required: true
        schema: { "type": "string"} 
        in: path
      responses:
        '200':
          description: Accessor test OK
        '400':
          description: Accessor not found/Accessor test Failed
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/accessors/{name}/get":
    get:
      summary: Descarga datos del recurso
      # nickname: getFromAccessor
      security:
      - cookieAuth: []
      parameters:
      - name: name
        description: nombre del accessor
        required: true
        schema: { "type": "string"} 
        in: path
      - name: timestart
        description: fecha-hora inicial
        required: false
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha-hora final
        required: false
        schema: { "type": "string"} 
        in: query
      - name: estacion_id
        description: id de estación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: var_id
        description: id de variable
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: no_download
        description: si true, no descarga el recurso, lee de archivo local
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: forecast_date
        description: fecha-hora de emisión (requerido para tabprono)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: series_id
        description: id de serie
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: tipo
        description: tipo de serie
        required: false
        schema: { "type": "string"} 
        in: query
      - name: id
        description: id del recurso
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Accessor not found/Accessor get Failed
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/accessors/{name}/update":
    post:
      summary: Descarga datos del recurso y actualiza base de datos
      # nickname: upsertToAccessor
      security:
      - cookieAuth: []
      parameters:
      - name: name
        description: nombre del accessor
        required: true
        schema: { "type": "string"} 
        in: path
      - name: timestart
        description: fecha-hora inicial
        required: false
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha-hora final
        required: false
        schema: { "type": "string"} 
        in: query
      - name: estacion_id
        description: id de estación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: var_id
        description: id de variable
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: no_download
        description: si true, no descarga el recurso, lee de archivo local
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: forecast_date
        description: fecha-hora de emisión (requerido para tabprono)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: run_asociaciones
        description: si true, actualiza asociaciones de las series descargadas
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: series_id
        description: id de serie
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: tipo
        description: tipo de serie
        required: false
        schema: { "type": "string"} 
        in: query
      - name: no_send_data
        description: no devolver datos (sólo cantidad de registros actualizados)
        required: false
        schema: { "type": "boolean"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Accessor not found/Accessor get Failed/Accessor upload Failed
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/accessors/{name}/upload":
    post:
      summary: Carga datos desde archivo y actualiza base de datos
      # nickname: uploadToAccessor
      security:
      - cookieAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string 
                  format: binary
                timestart:
                  type: string 
                timeend:
                  type: string 
                estacion_id:
                  type: integer
                no_download:
                  type: boolean
                forecast_date:
                  type: string 
                run_asociaciones:
                  type: boolean
                no_update:
                  type: boolean
      parameters:
      - name: name
        description: nombre del accessor
        required: true
        schema: { "type": "string"} 
        in: path
      responses:
        '200':
          description: OK
        '400':
          description: Accessor not found/Accessor get Failed
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/accessors/{name}/getSeries":
    get:
      summary: Descarga series (combinaciones de estación + variable) del recurso
      # nickname: getSeriesFromAccessor
      security:
      - cookieAuth: []
      parameters:
      - name: name
        description: nombre del accessor
        required: true
        schema: { "type": "string"} 
        in: path
      - name: tipo
        description: tipo de series
        required: false
        schema: { "type": "string"} 
        in: query
        example: puntual
      - name: estacion_id
        description: id de estación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: id_externo
        description: id de estación externo
        required: false
        schema: { "type": "string"} 
        in: query
      - name: unit_id
        description: id de unidades
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: proc_id
        description: id de procedimiento
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: series_id
        description: id de serie
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: tabla_id
        description: id alfanumérico de la fuente
        required: false
        schema: { "type": "string"} 
        in: query
      - name: fuentes_id
        description: id numérico de la fuente
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: area_id
        description: id numérico del área (sólo para tipo areal)
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: include_geom
        description: incluir geometría (sólo para tipo areal)
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: escena_id
        description: id de escena (sólo para tipo raster)
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Serie"
        '400':
          description: Accessor not found/Accessor get Failed
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/fuentes":
    get:
      summary: 'Obtiene listado de fuentes del tipo indicado '
      # nickname: getFuentes
      parameters:
      - name: tipo
        description: tipo de la fuente
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - rast
        in: path
      - name: nombre
        description: nombre de la fuente
        required: false
        schema: { "type": "string"} 
        in: query
      - name: tabla_id
        description: tabla_id de la fuente
        required: false
        schema: { "type": "string"} 
        in: query
      - name: public
        description: si true, solo selecciona las fuentes públicas
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: id
        description: id de la fuente
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Fuente"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea nuevas fuentes del tipo especificado
      # nickname: insertFuentes
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de la fuente
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - rast
        in: path
      requestBody:
        content:
          application/json:
            type: array
            items:
              "$ref": "/components/schemas/Fuente"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Fuente"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/fuentes/{id}":
    get:
      summary: Obtiene la fuente del tipo e id indicados
      # nickname: getFuente
      parameters:
      - name: tipo
        description: tipo de la fuente
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - rast
        in: path
      - name: id
        description: id de la fuente
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Fuente"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: actualiza la fuente del tipo e id especificado
      # nickname: updateFuente
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de la fuente
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - rast
        in: path
      - name: id
        description: id de la fuente
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        content:
          application/json:
            "$ref": "/components/schemas/Fuente"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Fuente"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina la fuente del tipo e id especificado
      # nickname: deleteFuente
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de la fuente
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - rast
        in: path
      - name: id
        description: id de la fuente
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Fuente"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/variables":
    get:
      summary: Obtiene el listado de variables
      # nickname: getVariables
      parameters:
      - name: id
        description: id de la variable
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: var
        description: código alfanumérico de la variable
        required: false
        schema: { "type": "string"} 
        in: query
      - name: nombre
        description: Nombre de la variable
        required: false
        schema: { "type": "string"} 
        in: query
      - name: abrev
        description: Abreviatura de la variable
        required: false
        schema: { "type": "string"} 
        in: query
      - name: type
        description: tipo de la variable
        required: false
        schema: { "type": "string"} 
        in: query
      - name: dataType
        description: tipo de dato de la variable según ODM
        required: false
        schema: { "type": "string"} 
        in: query
      - name: valueType
        description: tipo de valor de la variable según ODM
        required: false
        schema: { "type": "string"} 
        in: query
      - name: GeneralCategory
        description: categoría general de la variable según ODM
        required: false
        schema: { "type": "string"} 
        in: query
      - name: VariableName
        description: nombre de la variable según ODM
        required: false
        schema: { "type": "string"} 
        in: query
      - name: SampleMedium
        description: Medio de muestreo según ODM
        required: false
        schema: { "type": "string"} 
        in: query
      - name: def_unit_id
        description: id de unidades por defecto
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: timeSupport
        description: soporte temporal de la medición
        required: false
        schema: { "type": "string"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Variable"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea variables
      # nickname: upsertVariables
      security:
      - cookieAuth: []
      requestBody:
        description: Un array de objetos Variable
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variables:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Variable"
      responses:
        '201':
          description: Variables creadas o actualizadas
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Variable"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  "/obs/variables/{id}":
    get:
      summary: Obtiene Variable con el id indicado
      # nickname: getVariable
      parameters:
      - name: id
        description: id de la variable
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Variable"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: Actualiza la Variable con el id indicado
      # nickname: upsertVariable
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id de la Variable
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: objeto Variable
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                variable:
                  "$ref": "#/components/schemas/Variable"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Variable"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina la Variable del id indicado
      # nickname: deleteVariable
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id de la Variable
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Variable"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/procedimientos":
    get:
      summary: Obtiene procedimientos
      # nickname: getProcedimientos
      parameters:
      - name: id
        description: id del Procedimiento
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: nombre
        description: Nombre del Procedimiento (parcial o completo)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: abrev
        description: Nombre abreviado del Procedimiento (parcial o completo)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: descripcion
        description: descripción del Procedimiento (parcial o completa)
        required: false
        schema: { "type": "string"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Procedimiento"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: Crea Procedimientos
      # nickname: upsertProcedimientos
      security:
      - cookieAuth: []
      requestBody:
        description: listado de Procedimientos
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                procedimientos:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Procedimiento"
      responses:
        '201':
          description: Procedimientos creados o actualizados
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Procedimiento"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  "/obs/procedimientos/{id}":
    get:
      summary: Obtiene Procedimiento del id indicado
      # nickname: getProcedimiento
      parameters:
      - name: id
        description: id del Procedimiento
        required: true
        schema:
          type: integer
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Procedimiento"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: Actualiza Procedimiento del id indicado
      # nickname: upsertProcedimiento
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id del Procedimiento
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: objeto Procedimiento
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                procedimiento:
                  "$ref": "#/components/schemas/Procedimiento"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Procedimiento"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina Procedimiento del id indicado
      # nickname: deleteProcedimiento
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id del Procedimiento
        required: true
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Procedimiento"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/unidades":
    get:
      summary: Obtiene Unidades
      # nickname: getUnidades
      parameters:
      - name: id
        description: id del objeto Unidades
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: nombre
        description: nombre del objeto Unidades (completo o parcial)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: abrev
        description: Abreviatura del objeto Unidades (completo o parcial)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: UnitsID
        description: id de unidades según ODM
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: UnitsType
        description: tipo de unidades según ODM
        required: false
        schema: { "type": "string"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Unidad"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea objetos Unidades
      # nickname: upsertUnidades
      security:
      - cookieAuth: []
      requestBody:
        description: array de objetos Unidad
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                unidades:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Unidad"
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Unidad"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  "/obs/unidades/{id}":
    get:
      summary: obtiene el objeto Unidades del id indicado
      # nickname: getUnidad
      parameters:
      - name: id
        description: id de Unidades
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unidad"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: actualiza el objeto Unidades del id indicado
      # nickname: upsertUnidad
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id del objeto Unidades
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                unidad:
                  "$ref": "#/components/schemas/Unidad"
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  variable:
                    "$ref": "#/components/schemas/Unidad"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina objeto Unidades del id indicado
      # nickname: deleteUnidad
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id del objeto Unidades
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Unidad"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{obsTipo}/fuentes/{fuentes_id}/estaciones":
    get:
      summary: obtiene listado de estaciones de la fuente especificada
      # nickname: getEstaciones
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: fuentes_id
        description: id de la fuente
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: nombre
        description: nombre de la estación (parcial o completo)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: unid
        description: identificador único de la estación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: id
        description: identificador de la estación dentro de la fuente (red) a la que
          pertenece
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: id_externo
        description: id externo de la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: distrito
        description: jurisdicción de segundo orden en la que se encuentra la estación
          (parcial o completa)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: pais
        description: jurisdicción de primer orden en la que se encuentra la estación
          (parcial o completa)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: has_obs
        description: si la estación posee registros observados
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: real
        description: si la estación es real
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: habilitar
        description: si la estación se encuentra habilitada
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: tipo
        description: tipo de la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: has_prono
        description: si la estación posee registros pronosticados
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: rio
        description: curso de agua de la estación (parcial o completo)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: tipo_2
        description: 'tipo de estación: marca y/o modelo'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: geom
        description: 'coordenadas geográficas de la estación: x,y (punto) o x,y,x,y
          (caja)'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: propietario
        description: propietario de la estación (nombre parcial o completo)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: automatica
        description: si la estación es automática
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: ubicacion
        description: ubicación de la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: localidad
        description: localidad en la que se encuentra la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: tabla
        description: identificación alfanumérica de la fuente (red) a la que pertenece
          la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: pagination
        description: Habilita la paginación
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: limit
        description: Máximo número de registros
        required: false
        schema:
          type: number
        in: query
      - name: offset
        description: Posición de inicio de los registros
        required: false
        schema:
          type: number
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    "$ref": "#/components/schemas/Estacion"
                - type: object
                  properties:
                    estaciones:
                      type: array
                      "$ref": "#/components/schemas/Estacion"
                    is_last_page:
                      schema: { "type": "boolean"} 
                    next_page:
                      schema: { "type": "string"} 
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea estaciones
      # nickname: upsertEstaciones
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: fuentes_id
        description: id de la fuente
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: 'estaciones: array de objetos Estacion'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                estaciones:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Estacion"
      responses:
        '201':
          description: estaciones creadas o actualizadas
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Estacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  "/obs/{obsTipo}/fuentes/{fuentes_id}/estaciones/{id}":
    get:
      summary: obtiene la estación indicada
      # nickname: getEstacion
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: fuentes_id
        description: id de la fuente
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: id
        description: id de la estación
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Estacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: actualiza la estación indicada
      # nickname: upsertEstacion
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: fuentes_id
        description: id de la fuente
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: id
        description: id de la estación
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: 'estacion: objeto Estacion'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                estacion:
                  "$ref": "#/components/schemas/Estacion"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  variable:
                    "$ref": "#/components/schemas/Estacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina la estación indicada
      # nickname: deleteEstacion
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: fuentes_id
        description: id de la fuente
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: id
        description: id de la estación
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Estacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{obsTipo}/estaciones":
    get:
      summary: obtiene listado de estaciones
      # nickname: getEstaciones
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: fuentes_id
        description: id de la fuente
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: nombre
        description: nombre de la estación (parcial o completo)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: unid
        description: identificador único de la estación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: id
        description: identificador de la estación dentro de la fuente (red) a la que
          pertenece
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: id_externo
        description: id externo de la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: distrito
        description: jurisdicción de segundo orden en la que se encuentra la estación
          (parcial o completa)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: pais
        description: jurisdicción de primer orden en la que se encuentra la estación
          (parcial o completa)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: has_obs
        description: si la estación posee registros observados
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: real
        description: si la estación es real
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: habilitar
        description: si la estación se encuentra habilitada
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: tipo
        description: tipo de la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: has_prono
        description: si la estación posee registros pronosticados
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: rio
        description: curso de agua de la estación (parcial o completo)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: tipo_2
        description: 'tipo de estación: marca y/o modelo'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: geom
        description: 'coordenadas geográficas de la estación: x,y (punto) o x,y,x,y
          (caja)'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: propietario
        description: propietario de la estación (nombre parcial o completo)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: automatica
        description: si la estación es automática
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: ubicacion
        description: ubicación de la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: localidad
        description: localidad en la que se encuentra la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: tabla
        description: identificación alfanumérica de la fuente (red) a la que pertenece
          la estación
        required: false
        schema: { "type": "string"} 
        in: query
      - name: pagination
        description: Habilita la paginación
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: limit
        description: Máximo número de registros
        required: false
        schema:
          type: number
        in: query
      - name: offset
        description: Posición de inicio de los registros
        required: false
        schema:
          type: number
        in: query
      - name: get_drainage_basin
        description: "Obtener el polígono del área de drenaje. Si format=json, se almacena en la propiedad 'drainage_basin'. En cambio, si format=geojson, cambia la geometría al tipo 'GeometryCollection' donde 'geometries' es una lista que contiene un punto y polígono. Nota: no todas las estaciones tienen definida su área de drenaje"
        required: false
        schema:
          type: boolean
        in: query
      - name: format
        description: "Formato de archivo"
        required: false
        default: json
        schema:
          type: string
          enum:
          - json
          - geojson
          - csv
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    "$ref": "#/components/schemas/Estacion"
                - type: object
                  properties:
                    estaciones:
                      type: array
                      "$ref": "#/components/schemas/Estacion"
                    is_last_page:
                      schema: { "type": "boolean"} 
                    next_page:
                      schema: { "type": "string"} 
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea estaciones
      # nickname: upsertEstaciones
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      requestBody:
        description: 'estaciones: array de objetos Estacion'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                estaciones:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Estacion"
      responses:
        '201':
          description: estaciones creadas o actualizadas
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Estacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  "/obs/{obsTipo}/estaciones/{id}":
    get:
      summary: obtiene la estación indicada
      # nickname: getEstacion
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: id
        description: id de la estación
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: get_drainage_basin
        description: "Obtener el polígono del área de drenaje. Si format=json, se almacena en la propiedad 'drainage_basin'. En cambio, si format=geojson, cambia la geometría al tipo 'GeometryCollection' donde 'geometries' es una lista que contiene un punto y polígono. Nota: no todas las estaciones tienen definida su área de drenaje"
        required: false
        schema:
          type: boolean
        in: query
      - name: format
        description: "Formato de archivo"
        required: false
        default: json
        schema:
          type: string
          enum:
          - json
          - geojson
          - csv
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Estacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: actualiza la estación indicada
      # nickname: upsertEstacion
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema:
          type: string
          enum:
          - puntual
        in: path
      - name: id
        description: id de la estación
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: 'estacion: objeto Estacion'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                estacion:
                  "$ref": "#/components/schemas/Estacion"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  variable:
                    "$ref": "#/components/schemas/Estacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina la estación indicada
      # nickname: deleteEstacion
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema:
          type: string
          enum:
          - puntual
        in: path
      - name: id
        description: id de la estación
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Estacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{obsTipo}/areas":
    get:
      summary: obtiene listado de areas
      # nickname: getAreas
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: 
          type: string
          enum:
          - areal
        in: path
      - name: nombre
        description: nombre del área (parcial o completo)
        required: false
        schema: { "type": "string"} 
        in: query
      - name: unid
        description: identificador único del área
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: exutorio
        description: 'coordenadas geográficas de la sección de salida de la cuenca.
          lon,lat: punto. lon,lat,lon,lat: caja'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: geom
        description: 'ubicación del area en coordenadas geográficas. lon,lat: punto.
          lon,lat,lon,lat: caja'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: exutorio_id
        description: id de estación del exutorio (para cuencas vertientes)
        required: false
        schema: {"type": "number"}
        in: query
      - name: tabla
        description: identificador de red de estaciones a la cual pertenece el exutorio de este área
        required: false
        schema: { "type": "string"} 
        in: query
      - name: no_geom
        description: no descargar geometrías
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: pagination
        description: Habilita la paginación. Sin no_geom=true se habilita automáticamente.
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: limit
        description: Máximo número de registros
        required: false
        schema: {"type": "number"}
        in: query
      - name: offset
        description: Posición de inicio de los registros
        required: false
        schema: {"type": "number"}
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Area"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea areas
      # nickname: upsertAreas
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - areal
        in: path
      requestBody:
        description: 'areas: array de objetos Area'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                areas:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Area"
      responses:
        '201':
          description: areas creadas o actualizadas
          content:
            application/json:
              schema:
                oneOf:
                - type: array
                  items:
                    "$ref": "#/components/schemas/Area"
                - type: object
                  properties:
                    areas:
                    - type: array
                      items:
                        "$ref": "#/components/schemas/Area"
                    is_last_page:
                      schema: { "type": "boolean"} 
                    next_page:
                      schema: { "type": "string"} 
        '400':
          description: Bad request
        '401':
          description: Unauthorized
  "/obs/{obsTipo}/areas/{id}":
    get:
      summary: obtiene el área indicada
      # nickname: getArea
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - areal
        in: path
      - name: id
        description: id del área
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Area"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: actualiza el área indicada
      # nickname: upsertArea
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - areal
        in: path
      - name: id
        description: id de la estación
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: 'area: objeto Area'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                area:
                  "$ref": "#/components/schemas/Area"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  variable:
                    "$ref": "#/components/schemas/Area"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina el área indicada
      # nickname: deleteArea
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - areal
        in: path
      - name: id
        description: id del área
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Area"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/getMonitoredVars":
    get:
      summary: obtiene lista de variables de monitoreo
      parameters:
      - name: tipo
        schema: 
          type: string
          enum: ["puntual", "areal"]
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tipo:
                      schema:
                        type: string
                    tipo2:
                      schema:
                        type: string
                    id:
                      schema:
                        type: number
                    nombre:
                      schema:
                        type: string
                    GeneralCategory:
                      schema:
                        type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/getMonitoredPoints":
    get:
      summary: obtiene lista de puntos de monitoreo
      parameters:
      - name: var_id
        schema: {type: "integer"}
        in: query
      - name: proc_id
        schema: {type: "integer"}
        in: query
      - name: unit_id
        schema: {type: "integer"}
        in: query
      - name: estacion_id
        schema: {type: "integer"}
        in: query
      - name: proc_id
        schema: {type: "integer"}
        in: query
      - name: tabla
        schema: {type: "string"}
        in: query
      - name: geom
        schema: {type: "string"}
        in: query
      - name: red_id
        schema: {type: "integer"}
        in: query
      - name: public 
        schema: {type: "boolean"}
        in: query
      - name: GeneralCategory 
        schema:
          type: string
          enum: ["Hydrology", "Climate", "Water Quality"]
        in: query
      - name: timestart 
        schema: {type: "string", format: "date-time"}
        in: query
      - name: timeend 
        schema: {type: "string", format: "date-time"}
        in: query
      - name: limit
        schema: {type: "integer"}
        in: query
      - name: offset
        schema: {type: "integer"}
        in: query
      - name: geojson
        schema: {type: "boolean"}
        in: query
      - name: data_availability
        schema:
          type: string
        in: query
      - name: search
        schema:
          type: string
        in: query
      - name: sort
        schema:
          type: string
          enum: ["series_id","estacion_id","nombre","geom","longitud","latitud","rio","var_id","var_name","proc_id","unit_id","timestart","timeend","count","forecast_date","data_availability","fuente","id_externo"]
        in: query
      - name: order
        schema:
          type: string
          enum: ["asc", "desc"]
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_last_page:
                    type: boolean
                  next_page_url:
                    type: string
                  rows:
                    type: array
                    items:
                      "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{obsTipo}/series":
    get:
      summary: obtiene lista de series
      # nickname: getSeries
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: id
        description: id de la serie
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: area_id
        description: 'id del área (para obsTipo: areal)'
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: estacion_id
        description: 'id de la estación (para obsTipo: puntual)'
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: escena_id
        description: 'id de la escena (para obsTipo: raster)'
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: var_id
        description: id de la variable
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: proc_id
        description: id del procedimiento
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: unit_id
        description: id de las unidades
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: fuentes_id
        description: id de la fuente
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: tabla
        description: 'id alfanumérico de la fuentes (para obsTipo: puntual)'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: pais
        description: País de origen
        required: false
        schema:
          type: string
        in: query
      - name: id_externo
        description: 'id alfanumérico externo de la estación (para obsTipo: puntual)'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: geom
        description: 'geometría en coordenadas geográficas (punto: X,Y, 2 esquinas:
          X1,Y1,X2,Y2, o geometría en WKT) para buscar series que intersecten con
          la misma'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: include_geom
        description: indica si se debe incluir la geometría de las áreas (se excluye
          por defecto para alivianar el archivo)
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: no_metadata
        description: indica si se deben excluir los metadatos (si 'true', sólo se
          incluyen los id de estacion, var, unidades, procedimiento y fuente)
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: date_range_before
        description: La fecha inicial de la serie es inferior al valor indicado
        required: false
        schema: { "type": "string"} 
        in: query
      - name: date_range_after
        description: La fecha final de la serie es superior al valor indicado
        required: false
        schema: { "type": "string"} 
        in: query
      - name: getMonthlyStats
        description: Incluye estadísticos mensuales (percentiles 1,10,50,90,99)
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: getStats
        description: Calcula beginTime, endTime, count, minValor, maxValor
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: getPercentiles
        description: Incluye percentiles (0.01 a 0.99)
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: percentil
        description: 'Lista de números de dos cifras decimales separada por comas.
          Incluye los percentiles especificados (rango 0.01 a 0.99). Ejemplo: 0.01,0.10,0.50,0.90,0.99'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: format
        description: formato (json, gmd)
        required: false
        schema:
          oneOf:
           - json
           - geojson
           - csv
           - gmd
           - string
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea series
      # nickname: upsertSeries
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      requestBody:
        description: 'series: array de objetos Serie'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                series:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Serie"
      responses:
        '201':
          description: series creadas o actualizadas
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    delete:
      summary: elimina series
      # nickname: deleteSeries
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: id
        description: id de la serie
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: area_id
        description: 'id del área (para obsTipo: areal)'
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: estacion_id
        description: 'id de la estación (para obsTipo: puntual)'
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: escena_id
        description: 'id de la escena (para obsTipo: raster)'
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: var_id
        description: id de la variable
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: proc_id
        description: id del procedimiento
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: unit_id
        description: id de las unidades
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: fuentes_id
        description: id de la fuente
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: tabla
        description: 'id alfanumérico de la fuentes (para obsTipo: puntual)'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: id_externo
        description: 'id alfanumérico externo de la estación (para obsTipo: puntual)'
        required: false
        schema: { "type": "string"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{obsTipo}/series/{id}":
    get:
      summary: obtiene la serie indicada. . Si se dan timestart y timeend adjunta
        observaciones
      # nickname: getSerie
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: timestart
        description: fecha inicial de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: no_metadata
        description: no incluir metadatos
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: format
        description: formato (json, gmd)
        required: false
        schema:
          oneOf:
           - json
           - geojson
           - csv
           - gmd
           - string
        in: query      
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: actualiza la serie indicada
      # nickname: upsertSerie
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: series_id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: 'serie: objeto Serie'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                serie:
                  "$ref": "#/components/schemas/Serie"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  serie:
                    "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina la serie indicada
      # nickname: deleteSerie
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/observaciones":
    get:
      summary: obtiene listado de observaciones de la serie indicada
      # nickname: getObservaciones
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: timestart
        description: fecha inicial de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: id
        description: id de la observación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: unit_id
        description: id de las unidades
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: timeupdate
        description: fecha de actualización de las observaciones
        required: false
        schema: { "type": "string"} 
        in: query
      - name: valor
        description: valor de las observaciones. ingrese dos valores para definir
          un intervalo
        required: false
        schema: {"type": "number"}
        in: query
      - name: skip_nulls
        description: 'Para series a intervalos regulares, ignorar los datos nulos.
          Default: false'
        required: false
        schema: { "type": "boolean"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea observaciones
      # nickname: upsertObservaciones
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: skip_nulls
        description: 'Para series a intervalos regulares, ignorar los datos nulos.
          Default: true'
        required: false
        schema: { "type": "boolean"} 
        in: query
      requestBody:
        description: 'observaciones: array de objetos Observacion'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observaciones:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Observacion"
      responses:
        '201':
          description: observaciones creadas o actualizadas
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    delete:
      summary: elimina observaciones
      # nickname: deleteObservaciones
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: timestart
        description: fecha inicial de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: timeupdate
        description: fecha de actualización de las observaciones
        required: false
        schema: { "type": "string"} 
        in: query
      - name: id
        description: id de la observación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: unit_id
        description: id de las unidades
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: valor
        description: valor de las observaciones. ingrese 2 valores para definir un
          intervalo
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/observaciones/{id}":
    get:
      summary: obtiene la observación indicada
      # nickname: getObservacion
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: id
        description: id de la observación
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: actualiza la observación indicada
      # nickname: upsertObservacion
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: series_id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: id
        description: id de la observación
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: 'observacion: objeto Observacion'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observacion:
                  "$ref": "#/components/schemas/Observacion"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  observacion:
                    "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina la observación indicada
      # nickname: deleteObservación
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: id
        description: id de la observación
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/observaciones":
    get:
      summary: obtiene listado de observaciones
      # nickname: getSeries
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de la serie. Acepta múltiples valores separados por coma
        required: true
        schema:
          type: array
        items:
          schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: timestart
        description: fecha inicial de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: id
        description: id de la observación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: unit_id
        description: id de las unidades
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: timeupdate
        description: fecha de actualización de las observaciones
        required: false
        schema: { "type": "string"} 
        in: query
      - name: valor
        description: valor de las observaciones. ingrese dos valores para definir
          un intervalo
        required: false
        schema: {"type": "number"}
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea observaciones
      # nickname: upsertObservaciones
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      requestBody:
        description: 'observaciones: array de objetos Observacion'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observaciones:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Observacion"
      responses:
        '201':
          description: observaciones creadas o actualizadas
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
    delete:
      summary: elimina observaciones
      # nickname: deleteObservaciones
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de la serie. Acepta múltiples valores
        required: true
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: timestart
        description: fecha inicial de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: timeupdate
        description: fecha de actualización de las observaciones
        required: false
        schema: { "type": "string"} 
        in: query
      - name: id
        description: id de la observación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: unit_id
        description: id de las unidades
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: valor
        description: valor de las observaciones. ingrese 2 valores para definir un
          intervalo
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/observaciones/{id}":
    get:
      summary: obtiene la observación indicada
      # nickname: getObservacionByID
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: id
        description: id de la observación
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: actualiza la observación indicada
      # nickname: upsertObservacion
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        in: path
      - name: id
        description: id de la observación
        required: true
        schema: { "type": "integer"} 
        in: path
      requestBody:
        description: 'observacion: objeto Observacion'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                observacion:
                  "$ref": "#/components/schemas/Observacion"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  observacion:
                    "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    delete:
      summary: elimina la observación indicada
      # nickname: deleteObservación
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: id
        description: id de la observación
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{obsTipo}/series/{series_id}/extract":
    get:
      summary: extrae capa raster agregada temporalmente a partir de serie raster
      # nickname: rastExtract
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - raster
        in: path
      - name: series_id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: timestart
        description: fecha inicial de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: bbox
        description: 'caja geográfica para recortar el producto. lon,lat: punto, lon,lat,lon,lat:
          caja'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: pixel_height
        description: dimensión latitudinal de pixel del raster de salida
        required: false
        schema: {"type": "number"}
        in: query
      - name: pixel_width
        description: dimensión longitudinal de pixel del raster de salida
        required: false
        schema: { "type": "string"} 
        in: query
      - name: srid
        description: sistema de referencia espacial del raster de salida, código SRID
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: funcion
        description: 'función de agregación temporal. Default: SUM'
        required: false
        schema: { "type": "string"} 
        enum:
        - LAST
        - FIRST
        - MIN
        - MAX
        - COUNT
        - SUM
        - MEAN
        - RANGE
        in: query
      - name: format
        description: formato del raster de salida
        required: false
        schema: { "type": "string"} 
        enum:
        - gtiff
        - png
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{obsTipo}/series/{series_id}/extractByArea":
    get:
      summary: extrae serie temporal agregada espacialmente de observaciones raster
      # nickname: rastExtractByArea
      security:
      - cookieAuth: []
      parameters:
      - name: obsTipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - raster
        in: path
      - name: series_id
        description: id de la serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: timestart
        description: fecha inicial de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final de las observaciones
        required: true
        schema: { "type": "string"} 
        in: query
      - name: area_id
        description: id del área de interés
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: area_geom
        description: 'geometría del área de interés. lon,lat: punto, lon,lat,lon,lat:
          caja'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: agg_func
        description: 'función de agregación espacial. Default: mean'
        required: false
        schema: { "type": "string"} 
        enum:
        - mean
        - sum
        - count
        - min
        - max
        - stddev
        - nearest
        in: query
      - name: no_insert
        description: 'Si no deben insertarse los resultados en la serie correspondiente.
          default: false'
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: no_send_data
        description: 'Si no deben enviarse los resultados con la respuesta (solo realiza
          inserción). default: false'
        required: false
        schema: { "type": "boolean"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/dia/{date}":
    get:
      summary: 'obtiene las observaciones del tipo y día (YYYY-MM-DD) indicados (agregada
        a paso diario según agg_func: default mean)'
      # nickname: getObservacionesDia
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: 
          type: string
          enum:
          - puntual
          - areal
          - raster
        in: path
      - name: date
        description: fecha de la observación
        required: true
        schema: { "type": "string"} 
        in: path
      - name: series_id
        description: id de serie. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: var_id
        description: id de variable. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: proc_id
        description: id de procedimiento. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: fuentes_id
        description: id de fuente. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: cume_dist
        description: si debe adjuntar valor de distribución acumulada
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: estacion_id
        description: id de estación. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: area_id
        description: id de area. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: agg_func
        description: función de agregación temporal
        required: false
        schema: 
          type: string
          enum:
          - avg
          - sum
          - min
          - max
          - count
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ObservacionDia"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/dia/{date}":
    get:
      summary: 'obtiene las observaciones del tipo, serie y día (YYYY-MM-DD) indicados
        (agregada a paso diario según agg_func: default mean)'
      # nickname: getObservacionesDia
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie. acepta múltiples valores separados por comas
        required: true
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: path
      - name: date
        description: fecha de la observación
        required: true
        schema: { "type": "string"} 
        in: path
      - name: var_id
        description: id de variable. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: proc_id
        description: id de procedimiento. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: fuentes_id
        description: id de fuente. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: cume_dist
        description: si debe adjuntar valor de distribución acumulada
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: estacion_id
        description: id de estación. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: area_id
        description: id de area. acepta múltiples valores separados por comas
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: agg_func
        description: función de agregación temporal
        required: false
        schema: { "type": "string"} 
        enum:
        - avg
        - sum
        - min
        - max
        - count
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/ObservacionDia"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/regular":
    get:
      summary: obtiene una serie temporal regular a partir de la serie especificada
      # nickname: getRegularSeries
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: false
        schema: { "type": "integer"} 
        in: path
      - name: dt
        description: 'intervalo temporal. P. ej ''00:30:00'' o ''30 minutes''. Default:
          ''1 days'''
        required: false
        schema: { "type": "string"} 
        in: query
      - name: timestart
        description: fecha inicial
        required: false
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final
        required: false
        schema: { "type": "string"} 
        in: query
      - name: t_offset
        description: tiempo inicial. p. ej '07:00:00' o '7 hours'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: agg_func
        description: 'función de agregación temporal. Default: nearest'
        required: false
        schema: { "type": "string"} 
        enum:
        - mean
        - sum
        - count
        - min
        - max
        - stddev
        - nearest
        in: query
      - name: inst
        description: considerar la serie de origen como de registros instantáneos
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: timeSupport
        description: soporte temporal de la serie de origen. p. ej '01:00:00' o '1
          hours'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: precision
        description: 'cantidad de cifras decimales. Default: 3'
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/raster/cubos":
    get:
      summary: obtiene el listado de cubos de datos raster
      # nickname: getCubosSeries
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id numérico del cubo
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: proc_id
        description: id numérico del procedimiento
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: unit_id
        description: id numérico de las unidades
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: var_id
        description: id numérico de la variable
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/raster/cubos/{id}":
    get:
      summary: obtiene el cubo de datos raster
      # nickname: getCuboSerie
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id numérico del cubo
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Serie"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/raster/cubos/{id}/observaciones":
    get:
      summary: obtiene observaciones de cubo de datos raster
      # nickname: getCuboObservaciones
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id numérico del cubo
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: timestart
        description: fecha inicial
        required: true
        schema: {"type": "string", "format": "date-time"}
        in: query
      - name: timeend
        description: fecha final
        required: true
        schema: {"type": "string", "format": "date-time"}
        in: query
      - name: forecast_date
        description: fecha de emisión (para cubos de pronóstico)
        required: false
        schema: {"type": "string", "format": "date-time"}
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Observacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/asociaciones":
    get:
      summary: obtiene el listado de asociaciones entre series
      # nickname: getAsociaciones
      security:
      - cookieAuth: []
      parameters:
      - name: source_series_id
        description: id de la serie de origen
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: source_tipo
        description: tipo de observación de la serie de origen
        required: false
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: query
      - name: dest_series_id
        description: id de la serie de destino
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: dest_tipo
        description: tipo de observación de la serie de destino
        required: false
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: query
      - name: agg_func
        description: función de agregación
        required: false
        schema: { "type": "string"} 
        enum:
        - mean
        - sum
        - count
        - min
        - max
        - stddev
        - nearest
        in: query
      - name: dt
        description: intervalo temporal
        required: false
        schema: { "type": "string"} 
        in: query
      - name: t_offset
        description: tiempo inicial. p. ej '07:00:00' o '7 hours'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: source_var_id
        description: id de variable de la serie de origen
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: dest_var_id
        description: id de variable de la serie de destino
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: source_proc_id
        description: id de procedimiento de la serie de origen
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: dest_proc_id
        description: id de procedimiento de la serie de destino
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: estacion_id
        description: id de estación
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: provider_id
        description: id de fuente/proveedor
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: run
        description: ejecuta las asociaciones encontradas
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: timestart
        description: fecha inicial. Requerido si run=true
        required: false
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final. Requerido si run=true
        required: false
        schema: { "type": "string"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Asociacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: crea o actualiza asociaciones
      # nickname: upsertAsociaciones
      security:
      - cookieAuth: []
      requestBody:
        description: Un array de objetos Asociacion
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                asociaciones:
                  type: array
                  items:
                    "$ref": "#/components/schemas/Asociacion"
      responses:
        '200':
          description: OK
          content:
            application/json:
              type: array
              items:
                "$ref": "#/components/schemas/Asociacion"
        '400':
          description: Bad request
        '401':
          description: Authorization required
  "/obs/asociaciones/{id}":
    get:
      summary: obtiene la asociacion entre series del id indicado
      # nickname: getAsociacion
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id de la asociacion
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: run
        description: ejecuta la asociacion
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: timestart
        description: fecha inicial. Requerido si run=true
        required: false
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: fecha final. Requerido si run=true
        required: false
        schema: { "type": "string"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Asociacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    put:
      summary: actualiza la asociacion de id indicado
      # nickname: upsertAsociacion
      security:
      - cookieAuth: []
      requestBody:
        description: 'asociacion: un objeto Asociacion'
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                asociacion:
                  "$ref": "#/components/schemas/Asociacion"
      responses:
        '200':
          description: OK
          content:
            application/json:
              type: array
              items:
                "$ref": "#/components/schemas/Asociacion"
        '400':
          description: Bad request
        '401':
          description: Authorization required
    delete:
      summary: elimina la asociacion entre series del id indicado
      # nickname: deleteAsociacion
      security:
      - cookieAuth: []
      parameters:
      - name: id
        description: id de la asociacion
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Asociacion"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/estadisticosDiariosSuavizados":
    get:
      summary: obtiene estadísticos diarios suavizados
      # nickname: getEstadisticosDiariosSuavizados
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: true
        schema: { "type": "integer"} 
        in: path
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  varNames:
                    type: array
                    items:
                      schema: { "type": "string"} 
                  values:
                    type: array
                    items:
                      "$ref": "#/components/schemas/EstadisticosDiarios"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: obtiene y actualiza estadísticos diarios suavizados
      # nickname: upsertEstadisticosDiariosSuavizados
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: no_update
        description: no recalcular si ya existe
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: timestart
        description: fecha inicial para el cálculo de estadísticos
        required: false
        schema: {"type": "string", "format": "date-time"}
        in: query
        example: '1974-01-01'
      - name: timeend
        description: fecha final para el cálculo de estadísticos
        required: false
        schema: {"type": "string", "format": "date-time"}
        in: query
        example: '2020-01-01'
      - name: range
        description: rango en días de la ventana temporal para el suavizado del cálculo
          de estadísticos
        required: false
        schema: { "type": "integer"} 
        in: query
        example: 15
      - name: t_offset
        description: Hora de corte para la asignación de fecha de las observaciones
        required: false
        schema: { "type": "integer"} 
        in: query
        example: 0
      - name: precision
        description: Cantidad de cifras decimales
        required: false
        schema: { "type": "integer"} 
        in: query
        example: 3
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  varNames:
                    type: array
                    items:
                      schema: { "type": "string"} 
                  values:
                    type: array
                    items:
                      "$ref": "#/components/schemas/EstadisticosDiarios"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/estadisticosDiariosSuavizados/{cuantil}":
    get:
      summary: obtiene el cuantil indicado de la serie indicada para cada día del
        año
      # nickname: getCuantiDiarioSuavizado
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: cuantil
        description: cuantil 0-1 o 'all'
        required: true
        schema: {"type": "number"}
        in: path
      - name: timestart
        description: 'fecha inicial. Default: ''1974-01-01'','
        required: false
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: 'fecha final. Default: ''2020-01-01'''
        required: false
        schema: { "type": "string"} 
        in: query
      - name: range
        description: 'rango en días de la ventana temporal. Default: 15'
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: t_offset
        description: 'offset temporal de la agregación a paso diario. Default: 00:00:00'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: precision
        description: 'cantidad de cifras decimales. Default: 3'
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Percentil"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/percentilesDiarios":
    get:
      summary: obtiene los percentiles diarios de la serie especificada para el día
        especificado
      # nickname: getPercentilesDiarios
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: doy
        description: 'día del año. Acepta múltiples valores separados por comas. Default:
          todos'
        required: false
        schema:
          type: array
          items:
            schema: { "type": "integer"} 
        collectionFormat: csv
        in: query
      - name: date
        description: fecha
        required: false
        schema: { "type": "string"} 
        in: query
      - name: percentil
        description: 'Percentil (0-1). Acepta múltiples valores separados por comas.
          Default: todos'
        required: false
        schema:
          type: array
          items:
            type: number
        collectionFormat: csv
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Percentil"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
    post:
      summary: actualiza percentiles diarios de la serie especificada
      # nickname: upsertPercentilesDiarios
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: no_update
        description: no actualizar los registros preexistentes
        required: false
        schema: { "type": "boolean"} 
        in: query
      - name: timestart
        description: 'fecha inicial. Default: ''1974-01-01'','
        required: false
        schema: { "type": "string"} 
        in: query
      - name: timeend
        description: 'fecha final. Default: ''2020-01-01'''
        required: false
        schema: { "type": "string"} 
        in: query
      - name: range
        description: 'rango en días de la ventana temporal. Default: 15'
        required: false
        schema: { "type": "integer"} 
        in: query
      - name: t_offset
        description: 'offset temporal de la agregación a paso diario. Default: 00:00:00'
        required: false
        schema: { "type": "string"} 
        in: query
      - name: precision
        description: 'cantidad de cifras decimales. Default: 3'
        required: false
        schema: { "type": "integer"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Percentil"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/percentilesDiarios/{timestart}/{timeend}":
    get:
      summary: obtiene los percentiles diarios de la serie especificada para el intervalo
        de fechas especificado
      # nickname: getPercentilesDiarios
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: percentil
        description: 'Percentil (0-1). Acepta múltiples valores separados por comas.
          Default: todos'
        required: false
        schema:
          type: array
          items:
            type: number
        collectionFormat: csv
        in: query
      - name: timestart
        description: 'fecha inicial. Default: ''1974-01-01'','
        required: true
        schema: { "type": "string"} 
        in: path
      - name: timeend
        description: 'fecha final. Default: ''2020-01-01'''
        required: true
        schema: { "type": "string"} 
        in: path
      - name: inverted
        description: 'Toma percentiles como frecuencia de superación (permanencia por encima). Si se omite, los toma como frecuenca de no superación (permanencia por debajo)'
        required: false
        schema: { "type": "boolean"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Percentil"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/estadisticosMensuales":
    get:
      summary: obtiene los estadísticos mensuales de la serie especificada
      # nickname: getEstadisticosMensuales
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: run
        description: calcula los estadísticos
        required: false
        schema: { "type": "boolean"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/EstadisticosMensuales"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/obs/{tipo}/series/{series_id}/percentiles":
    get:
      summary: obtiene percentiles de la serie
      # nickname: getPercentiles
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de observación
        required: true
        schema: { "type": "string"} 
        enum:
        - puntual
        - areal
        - raster
        in: path
      - name: series_id
        description: id de serie
        required: true
        schema: { "type": "integer"} 
        in: path
      - name: percentil
        description: 'Lista separada por comas de números de dos cifras decimales.
          Rango 0.01 a 0.99. Ejemplo: ''0.01,0.10,0.50,0.90,0.99''. Si no se especifica,
          devuelve el rango completo'
        required: false
        schema: { "type": "string"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    tipo:
                      schema: { "type": "string"} 
                    series_id:
                      schema: { "type": "integer"} 
                    percentiles:
                      type: array
                      items:
                        "$ref": "#/components/schemas/PercentilGlobal"
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Not found
  "/tools/geojson2rast":
    post:
      summary: convierte vectorial de formato GeoJSON a raster de formato GeoTIFF
      # nickname: geojson2rast
      security:
      - cookieAuth: []
      requestBody:
        description: 'GeoJSON: un objeto GeoJSON'
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/GeoJSON"
      responses:
        '200':
          description: OK
          content:
            image/tif:
              type: binary
        '400':
          description: Bad request
        '401':
          description: Authorization required
  "/tools/pp_cdp/{timestart}":
    get:
      summary: devuelve mapa diario de precipitación de la cuenca del plata
      # nickname: read_pp_cdp
      security:
      - cookieAuth: []
      parameters:
      - name: timestart
        description: fecha inicial del periodo de agregación (día meteorológico)
        required: true
        schema: { "type": "string"} 
        in: path
      - name: no_send_data
        description: no enviar producto, sólo url
        required: false
        schema: { "type": "boolean"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            image/tif:
              type: binary
        '400':
          description: Bad request
        '401':
          description: Authorization required
    put:
      summary: genera mapa diario de precipitación de la cuenca del plata a partir
        de datos puntuales de estaciones
      # nickname: get_pp_cdp
      security:
      - cookieAuth: []
      parameters:
      - name: timestart
        description: fecha inicial del periodo de agregación
        required: true
        schema: { "type": "string"} 
        in: path
      - name: estacion_id
        description: id o array de id de estaciones
        required: false
        schema:
          oneOf:
          - type: number
            format: integer
          - type: array
            items:
              type: number
              format: integer
        in: query
      - name: red_id
        description: id o array de id de redes
        required: false
        schema:
          oneOf:
          - type: number
            format: integer
          - type: array
            items:
              type: number
              format: integer
        in: query
      - name: no_send_data
        description: no enviar producto, sólo url
        required: false
        schema: { "type": "boolean"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            image/tif:
              type: binary
        '400':
          description: Bad request
        '401':
          description: Authorization required
    post:
      summary: genera mapa diario de precipitación de la cuenca del plata a partir
        de datos puntuales de estaciones y actualiza base de datos
      # nickname: update_pp_cdp
      security:
      - cookieAuth: []
      parameters:
      - name: timestart
        description: fecha inicial del periodo de agregación (día meteorológico)
        required: true
        schema: { "type": "string"} 
        in: path
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                estacion_id:
                  description: id o array de id de estaciones
                  oneOf:
                  - type: number
                    format: integer
                  - type: array
                    items:
                      type: number
                      format: integer
                red_id:
                  description: id o array de id de redes
                  oneOf:
                  - type: number
                    format: integer
                  - type: array
                    items:
                      type: number
                      format: integer
                no_send_data:
                  description: no enviar producto, sólo url
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            image/tif: {}
        '400':
          description: Bad request
        '401':
          description: Authorization required
  "/tools/pp_cdp_semanal/{timestart}":
    post:
      summary: genera mapa semanal de precipitación de la cuenca del plata a partir
        de datos puntuales de estaciones y actualiza base de datos
      # nickname: get_pp_cdp_semanal
      security:
      - cookieAuth: []
      parameters:
      - name: timestart
        description: fecha inicial del periodo de agregación
        required: true
        schema: { "type": "string"} 
        in: path
      resquestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  estacion_id:
                    description: id o array de id de estaciones
                    required: false
                    oneOf:
                    - type: number
                      format: integer
                    - type: array
                      items:
                        type: number
                        format: integer
                  red_id:
                      description: id o array de id de redes
                      required: false
                      oneOf:
                      - type: number
                        format: integer
                      - type: array
                        items:
                          type: number
                          format: integer
                  no_send_data:
                    description: no enviar producto, sólo url
                    required: false
                    schema: { "type": "boolean"} 
      responses:
        '200':
          description: OK
          content:
            image/tif: {}
        '400':
          description: Bad request
        '401':
          description: Authorization required
  "/tools/pp_cdp_batch/{timestart}/{timeend}":
    post:
      summary: genera mapas diarios y semanales de precipitación de la cuenca del
        plata a partir de datos puntuales de estaciones y actualiza base de datos
        para el periodo especificado
      # nickname: pp_cdp_batch
      security:
      - cookieAuth: []
      parameters:
      - name: timestart
        description: fecha inicial
        required: true
        schema: { "type": "string"} 
        in: path
      - name: timeend
        description: fecha final
        required: true
        schema: { "type": "string"} 
        in: path
      resquestBody:
        content:
            application/json:
              schema:
                type: object
                properties:
                  estacion_id:
                    description: id o array de id de estaciones
                    required: false
                    oneOf:
                    - type: number
                      format: integer
                    - type: array
                      items:
                        type: number
                        format: integer
                  red_id:
                    description: id o array de id de redes
                    required: false
                    oneOf:
                    - type: number
                      format: integer
                    - type: array
                      items:
                        type: number
                        format: integer
                  no_send_data:
                    description: no enviar producto, sólo url
                    required: false
                    schema: { "type": "boolean"} 
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schema/Observacion"
        '400':
          description: Bad request
        '401':
          description: Authorization required
  "/tools/pp_cdp_product":
    get:
      summary: devuelve producto de precipitación de la cuenca del plata
      # nickname: pp_cdp_product
      security:
      - cookieAuth: []
      parameters:
      - name: tipo
        description: tipo de producto (diario/semanal)
        required: true
        schema:
          type: string
          enum:
          - diario
          - semanal
        in: query
      - name: fecha
        description: fecha del producto
        required: true
        schema: { "type": "string"} 
        in: query
      - name: producto
        description: tipo de producto según formato y nivel/método de agregación
        required: true
        schema: 
          type: string
          enum:
          - surf_png
          - surf_tif
          - points_geojson
          - points_csv
          - nearest_png
          - nearest_tif
        in: query
      - name: no_send_data
        description: no enviar producto, sólo url
        required: false
        schema: { "type": "boolean"} 
        in: query
      responses:
        '200':
          description: OK
          content:
            image/tif: {}
        '400':
          description: Bad request
        '401':
          description: Authorization required
components:
  schemas:
    Modelo:
      type: object
      properties:
        id:
          type: integer 
          description: identificador único del modelo
        nombre:
          schema: { "type": "string"} 
          description: Nombre del modelo
        tipo:
          schema: { "type": "string"} 
          description: Tipo de modelo
    ArrayOfModelos:
      type: array
      items:
        "$ref": "#/components/schemas/Modelo"
    Calibrado:
      type: object
      properties:
        id:
          type: integer 
          format: int64
          description: identificador único del calibrado
        model_id:
          type: integer 
          format: int64
          description: identificador único del modelo
        nombre:
          schema: { "type": "string"} 
          description: nombre del calibrado
          format: regexp
        activar:
          schema: { "type": "boolean"} 
          description: activar el calibrado
          default: true
        outputs:
          type: array
          items:
            "$ref": "#/components/schemas/Output"
          description: Series de salida del calibrado
        parametros:
          type: array
          items:
            "$ref": "#/components/schemas/Parametro"
          description: Parámetros del calibrado
        estados_iniciales:
          type: array
          items:
            "$ref": "#/components/schemas/Estado"
          description: Estados iniciales del calibrado
        forzantes:
          type: array
          items:
            "$ref": "#/components/schemas/Forzante"
          description: Series de entrada del calibrado
        selected:
          schema: { "type": "boolean"} 
          description: Si el calibrado debe seleccionarse como el principal para las
            series de salida
          example: false
        out_id:
          type: integer 
          format: int64
          description: id de estación de salida del calibrado
        area_id:
          type: integer 
          format: int64
          description: id de area del calibrado
        tramo_id:
          type: integer 
          format: int64
          description: id de tramo de curso de agua del calibrado
        dt:
          "$ref": "#/components/schemas/TimeInterval"
          description: intervalo temporal del calibrado en formato SQL, p. ej '1 days'
            o '12 hours' o '00:30:00'
          example: 1 days
        t_offset:
          "$ref": "#/components/schemas/TimeInterval"
          description: offset temporal del modelo en formato SQL, p ej '9 hours'
          example: 9 hours
        grupo_id:
          type: integer 
          format: int64
          description: id de grupo de calibrados
      required:
      - model_id
      - nombre
      table_name: calibrados
    TimeInterval:
      oneOf:
      - schema: { "type": "string"} 
        format: time-interval
      - type: object
        properties:
          milliseconds:
            type: integer 
            format: int64
          seconds:
            type: integer 
            format: int64
          minutes:
            type: integer 
            format: int64
          hours:
            type: integer 
            format: int64
          days:
            type: integer 
            format: int64
          months:
            type: integer 
            format: int64
          years:
            type: integer 
            format: int64
    Output:
      type: object
      properties:
        series_table:
          schema: { "type": "string"} 
          description: tabla a la que pertenece la serie de salida
          enum:
          - series
          - series_areal
          example: series
        series_id:
          type: integer 
          format: int64
          description: identificador único de la serie de salida
        orden:
          type: integer 
          format: int64
          description: número de orden de salida
          minimum: 1
        cal_id:
          type: integer 
          format: int64
          description: identificador único de calibrado
          readOnly: true
        id:
          type: integer 
          format: int64
          description: identificador único
          readOnly: true
      required:
      - series_id
      - orden
      table_name: cal_out
    Parametro:
      type: object
      properties:
        valor:
          type: number
          format: float
          description: valor del parámetro
        orden:
          type: integer 
          format: int64
          description: número de orden del parámetro
          minimum: 1
        cal_id:
          type: integer 
          format: int64
          description: identificador único de calibrado
          readOnly: true
        id:
          type: integer 
          format: int64
          description: identificador único
          readOnly: true
      required:
      - valor
      - orden
      table_name: cal_pars
    Estado:
      type: object
      properties:
        valor:
          type: number
          format: float
          description: valor del estado
        orden:
          type: integer 
          format: int64
          description: número de orden del estado
          minimum: 1
        cal_id:
          type: integer 
          format: int64
          description: identificador único de calibrado
          readOnly: true
        id:
          type: integer 
          format: int64
          description: identificador único
          readOnly: true
      required:
      - valor
      - orden
      table_name: cal_estados
    Forzante:
      type: object
      properties:
        series_table:
          schema: { "type": "string"} 
          description: tabla a la que pertenece la serie de entrada
          enum:
          - series
          - series_areal
          example: series
        series_id:
          type: integer 
          format: int64
          description: identificador único de la serie de entrada
        orden:
          type: integer 
          format: int64
          description: número de orden de entrada
          minimum: 1
        cal_id:
          type: integer 
          format: int64
          description: identificador único de calibrado
          readOnly: true
        id:
          type: integer 
          format: int64
          description: identificador único
          readOnly: true
        model_id:
          type: integer 
          format: int64
          description: identificador único de modelo
          readOnly: true
        serie:
          "$ref": "#/components/schemas/Serie"
          description: 'serie: objeto Serie'
          foreign_key: series_id
      required:
      - series_id
      - orden
      table_name: forzantes
    Corrida:
      type: object
      properties:
        forecast_date:
          schema: { "type": "string"} 
          description: Fecha de emisión
        series:
          type: array
          description: series temporales simuladas
          items:
            "$ref": "#/components/schemas/SerieTemporalSim"
      required:
      - forecast_date
      - series
    SerieTemporalSim:
      type: object
      properties:
        series_table:
          schema: { "type": "string"} 
          description: tabla de la serie simulada
          enum:
          - series
          - series_areal
          example: series
        series_id:
          type: integer 
          format: int64
          description: identificador único de serie simulada
        pronosticos:
          type: array
          items:
            "$ref": "#/components/schemas/Pronostico"
          description: Tuplas de la serie simulada
      required:
      - series_table
      - series_id
      - pronosticos
    Pronostico:
      type: object
      properties:
        timestart:
          schema: { "type": "string"} 
          description: fecha-hora inicial del pronóstico
          format: date-time
          interval: begin
        timeend:
          schema: { "type": "string"} 
          description: fecha-hora final del pronóstico
          format: date-time
          interval: end
        valor:
          type: number
          format: float
          description: valor del pronóstico
        qualifier:
          schema: { "type": "string"} 
          description: calificador opcional para diferenciar subseries, default:'main'
          example: main
      required:
      - timestart
      - timeend
      - valor
    Observacion:
      type: object
      properties:
        tipo:
          schema: { "type": "string"} 
          description: tipo de registro
          enum:
          - areal
          - puntual
          - raster
        timestart:
          schema: { "type": "string"} 
          description: fecha-hora inicial del registro
        timeend:
          schema: { "type": "string"} 
          description: fecha-hora final del registro
        valor:
          oneOf:
          - type: number
            format: float
          - schema: { "type": "string"} 
            format: binary
          description: valor del registro
        series_id:
          type: integer 
          description: id de serie
      required:
      - timestart
      - valor
    Accessor:
      type: object
      properties:
        name:
          schema: { "type": "string"} 
          description: nombre identificador del recurso
        url:
          schema: { "type": "string"} 
          description: ubicación del recurso
        class:
          schema: { "type": "string"} 
          description: tipo de recurso
        series_tipo:
          schema: { "type": "string"} 
          enum:
          - puntual
          - areal
          - raster
          description: tipo de la serie temporal correspondiente al recurso
        series_source_id:
          type: integer 
          description: id de la fuente correspondiente al recurso
        time_update:
          schema: { "type": "string"} 
          description: última fecha de actualización del recurso
        config:
          type: object
          properties:
            download_dir:
              schema: { "type": "string"} 
              description: directorio de descargas
            tmp_dir:
              schema: { "type": "string"} 
              description: directorio temporal
            tables_dir:
              schema: { "type": "string"} 
              description: directorio de tablas
            host:
              schema: { "type": "string"} 
              description: IP o url del recurso
            user:
              schema: { "type": "string"} 
              description: nombre de usuario del recurso
            password:
              schema: { "type": "string"} 
              description: contraseña del recurso
            path:
              schema: { "type": "string"} 
              description: ruta del recurso
        series_id:
          type: integer 
          description: id de la serie temporal correspondiente al recurso
    Fuente:
      oneOf:
      - "$ref": "#/components/schemas/FuenteRaster"
      - "$ref": "#/components/schemas/FuentePuntual"
    FuenteRaster:
      type: object
      properties:
        id:
          type: integer 
          description: id de la fuente
        nombre:
          schema: { "type": "string"} 
          description: nombre de la fuente
        data_table:
          schema: { "type": "string"} 
          description: ''
        data_column:
          schema: { "type": "string"} 
          description: ''
        tipo:
          schema: { "type": "string"} 
          description: tipo de la fuente
        def_proc_id:
          schema: { "type": "string"} 
          description: id de procedimiento por defecto de la fuente
        def_dt:
          schema: { "type": "string"} 
          description: intervalo temporal por defecto de la fuente
        hora_corte:
          schema: { "type": "string"} 
          description: hora de corte por defecto de la fuente
        def_unit_id:
          type: integer 
          description: id de unidades por defecto de la fuente
        def_var_id:
          type: integer 
          description: id de variable por defecto de la fuente
        fd_column:
          schema: { "type": "string"} 
          description: ''
        mad_table:
          schema: { "type": "string"} 
          description: ''
        scale_factor:
          type: number
          description: factor de escala por defecto de la fuente
        data_offset:
          type: number
          description: offset por defecto de la fuente
        def_pixel_height:
          type: " number"
          description: altura de pixel por defecto de la fuente
        def_pixel_width:
          type: number
          description: ancho de pixel por defecto de la fuente
        def_srid:
          type: integer 
          description: código SRID de georeferenciación por defecto de la fuente
        def_extent:
          schema: { "type": "string"} 
          description: id de procedimiento por defecto de la fuente
        date_column:
          schema: { "type": "string"} 
          description: ''
        def_pixel_type:
          schema: { "type": "string"} 
          description: tipo de dato del pixel por defecto de la fuente
        abstract:
          schema: { "type": "string"} 
          description: descripción de la fuente
        source:
          schema: { "type": "string"} 
          description: ubicación del origen de la fuente
    FuentePuntual:
      type: object
      properties:
        id:
          type: integer 
          description: id numérico de la fuente
        tabla_id:
          schema: { "type": "string"} 
          description: id alfanumérico de la fuente
        nombre:
          schema: { "type": "string"} 
          description: nombre de la fuente
        public:
          schema: { "type": "boolean"} 
          description: si la fuente es pública
        public_his_plata:
          schema: { "type": "boolean"} 
          description: si la fuente está disponible para HIS-Plata
    Variable:
      type: object
      properties:
        id:
          type: integer 
          description: id de la variable
        var:
          description: código alfanumérico de la variable
          schema: { "type": "string"} 
        nombre:
          description: Nombre de la variable
          schema: { "type": "string"} 
        abrev:
          description: Abreviatura de la variable
          schema: { "type": "string"} 
        type:
          description: tipo de la variable
          schema: { "type": "string"} 
        dataType:
          description: tipo de dato de la variable según ODM
          schema: { "type": "string"} 
        valueType:
          description: tipo de valor de la variable según ODM
          schema: { "type": "string"} 
        GeneralCategory:
          description: categoría general de la variable según ODM
          schema: { "type": "string"} 
        VariableName:
          description: nombre de la variable según ODM
          schema: { "type": "string"} 
        SampleMedium:
          description: Medio de muestreo según ODM
          schema: { "type": "string"} 
        def_unit_id:
          description: id de unidades por defecto
          type: integer 
        timeSupport:
          description: soporte temporal de la medición
          schema: { "type": "string"} 
    Procedimiento:
      type: object
      properties:
        id:
          description: id del Procedimiento
          type: integer 
        nombre:
          description: Nombre del Procedimiento
          schema: { "type": "string"} 
        abrev:
          description: Nombre abreviado del Procedimiento
          schema: { "type": "string"} 
        descripicion:
          description: descripción del Procedimiento
          schema: { "type": "string"} 
    Unidad:
      type: object
      properties:
        id:
          description: id de la Unidad
          type: integer 
        nombre:
          description: Nombre de la Unidad
          schema: { "type": "string"} 
        abrev:
          description: Nombre abreviado de la Unidad
          schema: { "type": "string"} 
        UnitsID:
          description: ID de unidades según ODM
          schema: { "type": "string"} 
        UnitsType:
          description: tipo de unidades según ODM
          schema: { "type": "string"} 
    Estacion:
      type: object
      properties:
        fuentes_id:
          description: id de la fuente
          type: integer 
        nombre:
          description: nombre de la estación (parcial o completo)
          schema: { "type": "string"} 
        unid:
          description: identificador único de la estación
          type: integer 
        id:
          description: identificador de la estación dentro de la fuente (red) a la
            que pertenece
          type: integer 
        id_externo:
          description: id externo de la estación
          schema: { "type": "string"} 
        distrito:
          description: jurisdicción de segundo orden en la que se encuentra la estación
            (parcial o completa)
          schema: { "type": "string"} 
        pais:
          description: jurisdicción de primer orden en la que se encuentra la estación
            (parcial o completa)
          schema: { "type": "string"} 
        has_obs:
          description: si la estación posee registros observados
          schema: { "type": "boolean"} 
        real:
          name: real
          schema: { "type": "boolean"} 
        habilitar:
          description: si la estación se encuentra habilitada
          schema: { "type": "boolean"} 
        tipo:
          description: tipo de la estación
          schema: { "type": "string"} 
        has_prono:
          description: si la estación posee registros pronosticados
          schema: { "type": "boolean"} 
        rio:
          description: curso de agua de la estación (parcial o completo)
          schema: { "type": "string"} 
        tipo_2:
          description: 'tipo de estación: marca y/o modelo'
          schema: { "type": "string"} 
        geom:
          description: coordenadas geográficas de la estación
          "$ref": "#/components/schemas/Geometry"
        propietario:
          description: propietario de la estación (nombre parcial o completo)
          schema: { "type": "string"} 
        automatica:
          description: si la estación es automática
          schema: { "type": "boolean"} 
        ubicacion:
          description: ubicación de la estación
          schema: { "type": "string"} 
        localidad:
          description: localidad en la que se encuentra la estación
          schema: { "type": "string"} 
        tabla:
          description: identificación alfanumérica de la fuente (red) a la que pertenece
            la estación
          schema: { "type": "string"} 
        drainage_basin:
          description: área de drenaje aguas arriba de la estación hidrométrica
          $ref: "#/components/schemas/Feature"
    Area:
      type: object
      properties:
        nombre:
          description: nombre del área
          schema: { "type": "string"} 
        id:
          description: identificador único del área
          type: integer 
        geom:
          description: geometría del área (polígono)
          "$ref": "#/components/schemas/Geometry"
        exutorio:
          description: geometría de la sección de salida (punto)
          "$ref": "#/components/schemas/Geometry"
    Escena:
      type: object
      properties:
        nombre:
          description: nombre de la escena
          schema: { "type": "string"} 
        unid:
          description: identificador único de la escena
          type: integer 
        geom:
          description: geometría de la escena (polígono)
          "$ref": "#/components/schemas/Geometry"
    Geometry:
      type: object
      properties:
        type:
          description: tipo de geometría
          schema: { "type": "string"} 
          enum:
          - Point
          - MultiPoint
          - LineString
          - MultiLineString
          - Polygon
          - MultiPolygon
          - GeometryCollection
        coordinates:
          description: coordenadas
          oneOf:
          - "$ref": "#/components/schemas/Position"
          - "$ref": "#/components/schemas/LineString"
          - "$ref": "#/components/schemas/Polygon"
          - "$ref": "#/components/schemas/MultiPolygon"
      required:
      - type
      - coordinates
    Position:
      type: array
      items:
        type: number
      minItems: 2
      maxItems: 3
    LineString:
      type: array
      items:
        "$ref": "#/components/schemas/Position"
      minItems: 2
    Polygon:
      type: array
      items:
        "$ref": "#/components/schemas/LineString"
    MultiPolygon:
      type: array
      items:
        "$ref": "#/components/schemas/Polygon"
    Serie:
      type: object
      properties:
        tipo:
          description: tipo de observación
          schema: { "type": "string"} 
          enum:
          - puntual
          - areal
          - raster
        id:
          description: id de la serie
          type: integer 
        estacion:
          description: 'estación/área/escena (para tipo: puntual/areal/raster respectivamente)'
          oneOf:
          - "$ref": "#/components/schemas/Estacion"
          - "$ref": "#/components/schemas/Area"
          - "$ref": "#/components/schemas/Escena"
          foreign_key: estacion_id
        var:
          description: variable
          "$ref": "#/components/schemas/Variable"
        procedimiento:
          description: procedimiento
          "$ref": "#/components/schemas/Procedimiento"
          foreign_key: proc_id
        unidades:
          description: unidades
          "$ref": "#/components/schemas/Unidad"
          foreign_key: unit_id
        fuente:
          description: 'fuente (para tipo: areal/raster)'
          "$ref": "#/components/schemas/Fuente"
          foreign_key: fuentes_id
        observaciones:
          description: arreglo de observaciones correspondientes a la serie
          type: array
          items:
            "$ref": "#/components/schemas/Observacion"
      required:
      - tipo
      - estacion_id
      - var_id
      - proc_id
      - unit_id
      table_name: series
    ObservacionDia:
      type: object
      properties:
        date:
          description: fecha de la observación
          schema: { "type": "string"} 
        series_id:
          description: id de serie
          type: integer 
        var_id:
          description: id de variable
          type: integer 
        proc_id:
          description: id de procedimiento
          type: integer 
        unit_id:
          description: id de unidades
          type: integer 
        estacion_id:
          description: id de estacion (tipo puntual)
          type: integer 
        valor:
          description: valor de la observación
          type: number
        fuentes_id:
          description: id de fuente (tipo areal y raster)
          type: integer 
        area_id:
          description: id de area (tipo areal)
          type: integer 
        tipo:
          description: tipo de observación
          schema: { "type": "string"} 
          enum:
          - puntual
          - areal
          - raster
        doy:
          description: día del año
          type: integer 
        cume_dist:
          description: valor de distribución acumulada
          type: number
    Asociacion:
      type: object
      properties:
        id:
          type: integer 
        source_tipo:
          schema: { "type": "string"} 
        source_series_id:
          type: integer 
        dest_tipo:
          schema: { "type": "string"} 
        dest_series_id:
          type: integer 
        agg_func:
          schema: { "type": "string"} 
        dt:
          schema: { "type": "string"} 
        t_offset:
          schema: { "type": "string"} 
        precision:
          type: integer 
        source_time_support:
          schema: { "type": "string"} 
        source_is_inst:
          schema: { "type": "boolean"} 
        source_series:
          "$ref": "#/components/schemas/Serie"
        dest_series:
          "$ref": "#/components/schemas/Serie"
        site:
          "$ref": "#/components/schemas/Estacion"
        expresion:
          schema: { "type": "string"} 
    EstadisticosDiarios:
      type: object
      properties:
        tipo:
          description: tipo de observación
          schema: { "type": "string"} 
        series_id:
          description: id de serie
          type: integer 
        doy:
          description: día del año
          type: integer 
        count:
          description: cantidad de registros
          type: integer 
        min:
          description: valor mínimo
          type: number
        max:
          description: valor máximo
          type: number
        mean:
          description: valor medio
          type: number
        p01:
          description: percentil 1
          type: number
        p10:
          description: percentil 10
          type: number
        p50:
          description: percentil 50
          type: number
        p90:
          description: percentil 90
          type: number
        p99:
          description: percentil 99
          type: number
        window_size:
          description: ventana temporal para el suavizado en días (a partir de y hasta
            el día del año en cuestión)
          type: integer 
        timestart:
          description: fecha inicial
          schema: { "type": "string"} 
        timeend:
          description: fecha final
          schema: { "type": "string"} 
    PercentilGlobal:
      type: object
      properties:
        tipo:
          description: tipo de observación
          schema: { "type": "string"} 
        series_id:
          description: id de serie
          type: integer 
        percentil:
          description: número de percentil (0.01 - 0.99)
          type: number
        count:
          description: cantidad de registros
          type: integer 
        timestart:
          description: fecha inicial
          schema: { "type": "string"} 
        timeend:
          description: fecha final
          schema: { "type": "string"} 
        valor:
          description: valor
          type: number
    EstadisticosMensuales:
      type: object
      properties:
        tipo:
          description: tipo de observación
          schema: { "type": "string"} 
        series_id:
          description: id de serie
          type: integer 
        mon:
          description: mes del año [0-11]
          type: integer 
        count:
          description: cantidad de registros
          type: integer 
        min:
          description: valor mínimo
          type: number
        max:
          description: valor máximo
          type: number
        mean:
          description: valor medio
          type: number
        p01:
          description: percentil 1
          type: number
        p10:
          description: percentil 10
          type: number
        p50:
          description: percentil 50
          type: number
        p90:
          description: percentil 90
          type: number
        p99:
          description: percentil 99
          type: number
        timestart:
          description: fecha inicial
          schema: { "type": "string"} 
        timeend:
          description: fecha final
          schema: { "type": "string"} 
    Percentil:
      type: object
      properties:
        tipo:
          schema: { "type": "string"} 
        series_id:
          type: integer 
        cuantil:
          type: number
        window_size:
          type: integer 
        doy:
          type: integer 
        timestart:
          schema: { "type": "string"} 
        timeend:
          schema: { "type": "string"} 
        count:
          type: integer 
        valor:
          type: number
    GeoJSON:
      type: object
      properties:
        type:
          schema: { "type": "string"} 
        features:
          type: array
          items:
            "$ref": "#/components/schemas/Feature"
    Feature:
      type: object
      properties:
        type:
          const: Feature
        id:
          type: number
        geometry:
          "$ref": "#/components/schemas/Geometry"
        properties:
          type: object
  securitySchemes:
    cookieAuth:
      type: apiKey
      description: cookie provista por el servidor en /login
      name: id
      in: cookie
