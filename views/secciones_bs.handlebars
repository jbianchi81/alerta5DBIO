<script src="js/obs_edit_table.js"></script>
<script src="js/series_edit_table.js"></script>
<div class="container p-3 my-3 border">
		<section id="mainHeading" style="display: flex;justify-content: space-between;">
		<h3 id="leftHeading">Series puntuales</h3>
		<h2>visualizador de datos</h2>
		<div>
			<a id="selectorToggle" class="btn btn-primary collapsed" data-toggle="collapse" href=".showHideFilters" role="button" aria-expanded="false" aria-controls="selector" style="">ocultar filtros</a>
			<button id="refresh" type="submit" form="selectorform" class="btn btn-info" disabled>
				<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
			      <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2v1z"></path>
			      <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466z"></path>
				</svg>
			</button>
		</div>
	</section>
	<section>
		<section id=series_banner class="multi-collapse showHideFilters collapse hide" style="justify-content: space-between; background-color: rgb(106, 150, 255);"></section>
		<section  id=selector class="multi-collapse showHideFilters collapse show" style="justify-content: space-between;">
			<form id=selectorform class="container">
				<div class="filter-container" id="filters" style="background-color: rgb(106, 150, 255);">
				<div>
					<label for=generalCategory>Categoría</label>
					<select name=generalCategory id=generalCategory class="form-control" style="font-size: medium;">
						<option value="" selected>-- Todas --</option>
						<option value="Hydrology">Hidrología</option>
						<option value="Climate">Meteorología</option>
						<option value="Water Quality">Calidad de agua</option>
					</select>
				</div>
				<div>
					<label for=varId>Variable</label>
					<select name=varId id=varId class="form-control" style="font-size: medium;">
						<option value="" selected>-- Todas --</option>
					</select>
				</div>
				<div>
					<label for=redId>Red</label>
					<select name=redId id=redId class="form-control" style="font-size: medium;">
						<option value="" selected>-- Todas --</option>
					</select>
				</div>
				<div>
					<label for=estacionId>Estación</label>
					<select name=estacionId id=estacionId class="form-control" style="font-size: medium;">
						<option value="" >-- Todas --</option>
					</select>
				</div>
				<div hidden>
					<label for=seriesId>Estación</label>
					<select name=seriesId id=seriesId class="form-control" style="font-size: medium;">
						<option value="" ></option>
					</select>
				</div>
				<div hidden>
					<label for=procId>Procedimiento</label>
					<input name=procId id=procId class="form-control" style="font-size: medium;" />
				</div>
				<div>
					<label for=timestart>Inicio</label>
					<input type="date" pattern="^\d{4}-\d{2}-\d{2}$" maxlength=10 minlength=10 name=timestart id=timestart placeholder="YYYY-MM-DD" class="form-control" style="font-size: medium;" />
				</div>
				<div>
					<label for=timeend>Fin</label>
					<input type="date" pattern="^\d{4}-\d{2}-\d{2}$" maxlength=10 minlength=10 name=timeend id=timeend  placeholder="YYYY-MM-DD" class="form-control"  style="font-size: medium;" />
				</div>
				<div>
						<table>
						<tr>
							<td><button name=submit type=submit class="btn btn-primary" style="width: 80px; height:55px">&nbsp;Aplicar filtros&nbsp;</button></td>
						</tr>
						<tr>
							<td><a id=toggleAddFilters href="" title="habilitar/deshabilitar filtros adicionales">más filtros</a></td>
						</tr>
					</table>
				</div>
				{{!-- <div>
					<label for=has_obs>Tiene datos</label>
					<input type=checkbox name=has_obs title="has_obs" class="form-control" style="font-size: medium;">
				</div> --}}
				<div class=additionalFilters>
					<label for=data_availability>Tiene datos</label>
					<select type=checkbox name=data_availability title="disponibilidad de datos" class="form-control" style="font-size: medium;">
						<option value="a">todas las series</option>
						<option value="r">últimas 24 horas</option>
						<option value="n">últimos 3 días</option>
						<option value="c">periodo seleccionado</option>
						<option value="h">en cualquier fecha</option>
					</select>
				</div>
				<div class=additionalFilters>
					<table id=bbox_inputs title="Ingrese coordenadas de esquinas para búsqueda por rectángulo (UL: superior izquierda, LR: inferior derecha, grados decimales)">
						<tr>
							<td><button id=clearGeom title="borrar coordenadas" type=button><i class="fa fa-times" aria-hidden="true"></i></button></td>
							<th>lon.</th>
							<th>lat.</th>
						</tr>
						<tr>
							<th>UL</th>
							<td><input name=west type=number step="any" class="form-control" style="padding:0px" /></td>
							<td><input name=north type=number step="any" class="form-control" style="padding:0px" /></td>
						</tr>
						<tr>
							<th>LR</th>
							<td><input name=east type=number step="any" class="form-control" style="padding:0px" /></td>
							<td><input name=south type=number step="any" class="form-control" style="padding:0px" /></td>
						</tr>
					</table>
				</div>				
				<div class=additionalFilters>
					<label for=has_prono>Tiene previsión</label>
					<input type=checkbox name=has_prono title="has_prono" class="form-control" style="font-size: medium;">
				</div>
				<div class=prono-group>
					<label for=cal_grupo_id>grupo de modelos</label>
					<select type=number name=cal_grupo_id title="grupo de modelos" class="form-control" style="font-size: medium;">
						<option value="">Todos</option>
					</select>
				</div>
				<div class=prono-group>
					<label for=cal_id>modelo</label>
					<select type=number name=cal_id title="modelo (calibrado)" class="form-control" style="font-size: medium;">
						<option value="">Todos</option>
					</select>
				</div>
				<div class=prono-group2>
					<label for=forecast_date>fecha de emisión</label>
					<select type=text name=forecast_date title="fecha de emisión" class="form-control" style="font-size: medium;">
						<option value="">Última</option>
					</select>
				</div>
				<div class=additionalFilters>
					<label for=fuentesId title="Seleccione una opción para buscar series areales. Seleccione --Ninguna-- para buscar series puntuales">Fuente de datos areales</label>
					<select name=fuentesId id=fuentesId class="form-control" style="font-size: medium;" title="Seleccione una opción para buscar series areales. Seleccione --Ninguna-- para buscar series puntuales">
						<option value="" selected>-- Ninguna --</option>
					</select>
				</div>
			</form>
		</section>
		<a href="html/README.html" style="font-size: small">ayuda</a>
	</section>
	<ul class="nav nav-tabs">
	  <li class="nav-item">
		<a class="nav-link active" data-toggle="tab" href="#general" id=generaltab>General</a>
	  </li>
	  <li class="nav-item">
		<a class="nav-link" data-toggle="tab" href="#mapa" id=maptab>Mapa</a>
	  </li>
	  <li class="nav-item">
		<a class="nav-link" data-toggle="tab" href="#tabla_series" id=tableseriestab>Tabla series</a>
	  </li>
	  <li class="nav-item">
		<a class="nav-link" data-toggle="tab" href="#tabla" id=tabletab>Tabla datos</a>
	  </li>
	  <li class="nav-item">
		<a class="nav-link" data-toggle="tab" href="#tabla_prono" id=tablepronotab>Tabla prono</a>
	  </li>
	  <li class="nav-item">
		<a class="nav-link" data-toggle="tab" href="#grafico" id=charttab>Gráfico</a>
	  </li>
	  <li class="nav-item">
		<a class="nav-link" data-toggle="tab" href="#descargas">Descargas</a>
	  </li>
	</ul>
	<div class="tab-content" style="display: none">
		<div class="tab-pane active container tabcontent" id="general">
			<ul id=general>
			</ul>
		</div>
		<div class="tab-pane container tabcontent" id="mapa">
			<div class=container style="position: relative">
				<div id="map" class="map" style="min-width:300px;"></div>
				<div id=maplegend>
<!--
					<h4>Referencias</h4>
-->
					<table class=maplegend>
						<tr><td><img src="img/N.gif"></td><td>sin datos</td></tr>
						<tr><td><img src="img/S.gif"></td><td>simulado</td></tr>
						<tr><td><img src="img/H.gif"></td><td>histórico</td></tr>
						<tr><td><img src="img/H+S.gif"></td><td>histórico+sim.</td></tr>
						<tr><td><img src="img/C.gif"></td><td>periodo selecc.</td></tr>
						<tr><td><img src="img/C+S.gif"></td><td>periodo selecc.+sim.</td></tr>
						<tr><td><img src="img/NRT.gif"></td><td>quasi-tiempo real</td></tr>
						<tr><td><img src="img/NRT+S.gif"></td><td>quasi-tiempo real+sim.</td></tr>
						<tr><td><img src="img/RT.gif"></td><td>tiempo real</td></tr>
						<tr><td><img src="img/RT+S.gif"></td><td>tiempo real+sim</td></tr>
					</table>
				</div>
				<label for="toggleDraw" class="switch1" id="toggleDrawLabel" title="habilitar rectángulo de búsqueda" style="position: absolute; left: 60px; top:10px">
					<img src="img/box_select.png" />
				</label>
				<input type="checkbox" id="toggleDraw" class="toggleDraw" hidden>
					{{!-- <span class="slider"></span> --}}
				</input>
				<label for="toggleAreasLayerVisibility" class="switch1" id="toggleAreasLayerVisibilityLabel" title="mostrar/ocultar capa de áreas" style="position: absolute; right: 30px; top:30px" hidden>
					<img src="img/areas.png" />
				</label>
				<input type="checkbox" id="toggleAreasLayerVisibility" class="toggleAreasLayerVisibility" hidden>
					{{!-- <span class="slider"></span> --}}
				</input>

			</div>
		</div>
		<div class="tab-pane container tabcontent" id="tabla_series">
		</div>
		<div class="tab-pane container tabcontent" id="tabla">
			
<!--
			<table id=table_container class=tabla_reg>
				<thead>
					<tr>
						<th>Fecha</th>
						<th>Valor</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td></td>
						<td></td>
					</tr>
					<tr>
						<td></td>
						<td></td>
					</tr>
				</tbody>
			</table>
-->
		</div>
		<div class="tab-pane container tabcontent" id="tabla_prono">
			<table id=table_container_prono class=tabla_reg>
				<thead>
					<tr>
						<th>Fecha</th>
						<th>Valor</th>
					</tr>
				</thead>
				<tbody>
				</tbody>
			</table>
		</div>
		<div class="tab-pane container tabcontent" id="grafico">
			<div class="chart-title row">
				<div class="btn-group col-sm" role=group>
					<button type="button" class="btn btn-info add-series" disabled><i class="fa fa-plus"></i>Agregar serie</button>
					<button type="button" class="btn btn-info remove-series" disabled><i class="fa fa-minus"></i>Borrar última serie</button>
					<button type="button" class="btn btn-info toggle-pronos" data-toggle="tooltip" title="muestra/esconde series de pronóstico" disabled><i class="fa fa-eye"  aria-hidden="true"></i>Toggle pronos</button>
					<button type="button" class="btn btn-info downld-pronos" data-toggle="tooltip" title="Descarga series de pronóstico" disabled><i class="fa fa-download" aria-hidden="true"></i>Descargar pronos</button>
					<button type="button" class="btn btn-info toggle-stats" data-toggle="tooltip" title="muestra/esconde series de estadísticos" disabled><i class="fa fa-eye"  aria-hidden="true"></i>Toggle stats</button>
					<button type="button" class="btn btn-info downld-stats" title="Descarga series de estadísticos" disabled><i class="fa fa-download" aria-hidden="true"></i>Descargar stats</button>
					<button type="button" class="btn btn-info add-percentile" title="agrega series de percentiles" disabled><i class="fa fa-plus"></i>Agregar percentil</button>
					<button type="button" class="btn btn-info downld-percentile" title="Descarga series de percentiles" disabled><i class="fa fa-download" aria-hidden="true"></i>Descargar percentiles</button>
				</div>
			</div>

			<div id=chart_container style="height: 80%; min-height: 320px;"></div>
			<div id="chartModal" class="modal fade" role="dialog" style="display: none;">
			  <div class="modal-dialog">
				<div class="modal-content">
				  <div class="modal-header">
					<button type="button" class="close" data-dismiss="modal">&times;</button>
					<h4 class="modal-title">Seleccione serie adicional</h4>
				  </div>
				  <div class="modal-body" id=modal_body>
					<form id=chooseaddseries class=chooseaddseries action="getObservaciones" method=POST target="_blank">
						<input name=tipo value=puntual hidden>
						<select name=series_id style="width: 450px;"></select>
						<input name=timestart type=date hidden>
						<input name=timeend type=date hidden>
						<input type=submit>
					</form>
				  </div>
				  <div class="modal-footer">
					<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
				  </div>
				</div>
			  </div>
			</div>
			<div id="chartModal2" class="modal fade" role="dialog" style="display: none;">
			  <div class="modal-dialog">
				<div class="modal-content">
				  <div class="modal-header">
					<button type="button" class="close" data-dismiss="modal">&times;</button>
					<h4 class="modal-title">Seleccione percentil</h4>
				  </div>
				  <div class="modal-body" id=modal_body>
					<form id=choosepercentile class=choosepercentile action="getPercentilesDiariosBetweenDates" method=GET target="_blank">
						<input name=tipo value=puntual hidden>
						<input name=series_id hidden>
						<input name=timestart type=date hidden>
						<input name=timeend type=date hidden>
						<select name=percentil multiple style="width: 250px;" required=true>
							<option value=0.01>0.01</option>
							<option value=0.02>0.02</option>
							<option value=0.03>0.03</option>
							<option value=0.04>0.04</option>
							<option value=0.05>0.05</option>
							<option value=0.06>0.06</option>
							<option value=0.07>0.07</option>
							<option value=0.08>0.08</option>
							<option value=0.09>0.09</option>
							<option value=0.10>0.10</option>
							<option value=0.11>0.11</option>
							<option value=0.12>0.12</option>
							<option value=0.13>0.13</option>
							<option value=0.14>0.14</option>
							<option value=0.15>0.15</option>
							<option value=0.16>0.16</option>
							<option value=0.17>0.17</option>
							<option value=0.18>0.18</option>
							<option value=0.19>0.19</option>
							<option value=0.20>0.20</option>
							<option value=0.21>0.21</option>
							<option value=0.22>0.22</option>
							<option value=0.23>0.23</option>
							<option value=0.24>0.24</option>
							<option value=0.25>0.25</option>
							<option value=0.26>0.26</option>
							<option value=0.27>0.27</option>
							<option value=0.28>0.28</option>
							<option value=0.29>0.29</option>
							<option value=0.30>0.30</option>
							<option value=0.31>0.31</option>
							<option value=0.32>0.32</option>
							<option value=0.33>0.33</option>
							<option value=0.34>0.34</option>
							<option value=0.35>0.35</option>
							<option value=0.36>0.36</option>
							<option value=0.37>0.37</option>
							<option value=0.38>0.38</option>
							<option value=0.39>0.39</option>
							<option value=0.40>0.40</option>
							<option value=0.41>0.41</option>
							<option value=0.42>0.42</option>
							<option value=0.43>0.43</option>
							<option value=0.44>0.44</option>
							<option value=0.45>0.45</option>
							<option value=0.46>0.46</option>
							<option value=0.47>0.47</option>
							<option value=0.48>0.48</option>
							<option value=0.49>0.49</option>
							<option value=0.50>0.50</option>
							<option value=0.51>0.51</option>
							<option value=0.52>0.52</option>
							<option value=0.53>0.53</option>
							<option value=0.54>0.54</option>
							<option value=0.55>0.55</option>
							<option value=0.56>0.56</option>
							<option value=0.57>0.57</option>
							<option value=0.58>0.58</option>
							<option value=0.59>0.59</option>
							<option value=0.60>0.60</option>
							<option value=0.61>0.61</option>
							<option value=0.62>0.62</option>
							<option value=0.63>0.63</option>
							<option value=0.64>0.64</option>
							<option value=0.65>0.65</option>
							<option value=0.66>0.66</option>
							<option value=0.67>0.67</option>
							<option value=0.68>0.68</option>
							<option value=0.69>0.69</option>
							<option value=0.70>0.70</option>
							<option value=0.71>0.71</option>
							<option value=0.72>0.72</option>
							<option value=0.73>0.73</option>
							<option value=0.74>0.74</option>
							<option value=0.75>0.75</option>
							<option value=0.76>0.76</option>
							<option value=0.77>0.77</option>
							<option value=0.78>0.78</option>
							<option value=0.79>0.79</option>
							<option value=0.80>0.80</option>
							<option value=0.81>0.81</option>
							<option value=0.82>0.82</option>
							<option value=0.83>0.83</option>
							<option value=0.84>0.84</option>
							<option value=0.85>0.85</option>
							<option value=0.86>0.86</option>
							<option value=0.87>0.87</option>
							<option value=0.88>0.88</option>
							<option value=0.89>0.89</option>
							<option value=0.90>0.90</option>
							<option value=0.91>0.91</option>
							<option value=0.92>0.92</option>
							<option value=0.93>0.93</option>
							<option value=0.94>0.94</option>
							<option value=0.95>0.95</option>
							<option value=0.96>0.96</option>
							<option value=0.97>0.97</option>
							<option value=0.98>0.98</option>
							<option value=0.99>0.99</option>
						</select>
						<input name="inverted" value="true" hidden>
						<input type=submit>
					</form>
				  </div>
				  <div class="modal-footer">
					<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
				  </div>
				</div>
			  </div>
			</div>
		</div>
		<div class="tab-pane container tabcontent" id="descargas">
			<h4>API endpoints</h4>
			<ul>
				<li>
					<b>Serie temporal con metadatos (JSON):    </b>
					<a id=descargarJson download="serie.json" href="getObservaciones?tipo=puntual&series_id=&timestart=&timeend=">getObservaciones?tipo=puntual&amp;series_id=&amp;timestart=&amp;timeend=</a>
				</li>
				<li>
					<b>Serie temporal (CSV):    </b>
					<a id=descargarCSV download="observaciones.csv" href="getObservaciones?tipo=puntual&series_id=&timestart=&timeend=&format=csv">getObservaciones?tipo=puntual&amp;series_id=&amp;timestart=&amp;timeend=&amp;format=csv</a>
				</li>
				<li>
					<b>Serie temporal (CSV sin metadatos):    </b>
					<a id=descargarCSVless download="observaciones.csv" href="getObservaciones?tipo=puntual&series_id=&timestart=&timeend=&format=csvless&no_id=true">getObservaciones?tipo=puntual&amp;series_id=&amp;timestart=&amp;timeend=&amp;format=csvless&amp;no_id=true</a>
				</li>
				<li>
					<b>Serie temporal (waterML2):    </b>
					<a id=descargarWaterml2 download="serie.wml2" href="obs/puntual/series/{id}?timestart=&timeend=&format=waterml2">obs/puntual/series/{id}?timestart=&timeend=&format=waterml2</a>
				</li>
				<li>
					<b>Serie temporal (Mnemos):    </b>
					<a id=descargarMnemos download="observaciones.csv" href="obs/puntual/series/{id}?timestart=&timeend=&format=mnemos">obs/puntual/series/{id}?timestart=&amp;timeend=&amp;format=mnemos</a>
				</li>
				<li>
					<b>Series (GeoJSON):    </b>
					<a id=descargarPoints download="series.geojson" href="obs/puntual/series?format=geojson">obs/puntual/series?format=geojson</a>
				</li>
				<li>
					<b>Cuantiles diarios (JSON):    </b>
					<a id=descargarDoyStatsJSON download="CuantilesDiarios.json" href="obs/puntual/series/{id}/estadisticosDiarios?format=json">obs/puntual/series/{id}/estadisticosDiarios?format=json</a>
				</li>
				<li>
					<b>Cuantiles diarios (CSV):    </b>
					<a id=descargarDoyStatsCSV download="CuantilesDiarios.csv" href="obs/puntual/series/{id}/estadisticosDiarios?format=csv">obs/puntual/series/{id}/estadisticosDiarios?format=csv</a>
				</li>
				<li>
					<b>Cuantiles mensuales (JSON):    </b>
					<a id=descargarMonStatsJSON download="CuantilesMensuales.json" href="obs/puntual/series/{id}/estadisticosMensuales?format=json">obs/puntual/series/{id}/estadisticosMensuales?format=json</a>
				</li>
				<li>
					<b>Cuantiles mensuales (CSV):    </b>
					<a id=descargarMonStatsCSV download="CuantilesMensuales.csv" href="obs/puntual/series/{id}/estadisticosMensuales?format=csv">obs/puntual/series/{id}/estadisticosMensuales?format=csv</a>
				</li>
				<li>
					<b>Percentiles diarios (JSON):    </b>
					<a id=descargarPercentiles download="PercentilesDiarios.json" href="getPercentilesDiarios?series_id=">getPercentilesDiarios?series_id=</a>
				</li>
				<li>
					<b>Percentiles diarios (CSV):    </b>
					<a id=descargarPercentilesCSV download="PercentilesDiarios.csv" href="getPercentilesDiarios?series_id=">getPercentilesDiarios?series_id=</a>
				</li>
				<li>
					<b>Percentiles diarios entre fechas (JSON):    </b>
					<a id=descargarPercentilesDiariosBetweenDates download="PercentilesDiariosBetweenDates.csv" href="getPercentilesDiariosBetweenDates?tipo=puntual&series_id=&timestart=&timeend=&percentil=&inverted=true">getPercentilesDiariosBetweenDates?tipo=puntual&amp;series_id=&amp;timestart=&amp;timeend=&amp;percentil=&amp;inverted=true</a>
					<span>    (acepta 1 o más valores del parámetro 'percentil' [0.01 a 0.99]. Si falta obtiene todos)</span>
				</li>
				<li>
					<b>Metadatos en formato ISO 19115-2:        </b>
					<a id=descargarGmd download="series_metadata.xml" href="obs/{tipo}/series/{id}?format=gmd">obs/{tipo}/series/{id}?format=gmd</a>
				</li>
			</ul>
			<div>Ver la descripción completa de la API <a href="apiUI">aquí</a></div>
			<h4>Otros</h4>
			<ul>
				<li>
					<b>Estación de monitoreo seleccionada (GeoJSON):    </b>
					<a id=descargarPoint download="seccion.GeoJSON"></a>
				</li>
			</ul>
		</div>
		<!-- Modal -->
		<div id="myModal" class="modal fade obs_edit_table_modal" role="dialog">
		  <div class="modal-dialog">

			<!-- Modal content-->
			<div class="modal-content">
			  <div class="modal-header">
				<h4 class="modal-title">Confirma</h4>
				<button type="button" class="close" data-dismiss="modal">&times;</button>
			  </div>
			  <div class="modal-body" id=confirm_modal_body>
				<form id=confirm class=confirm action="/deleteObservacion" method=POST target="_blank">
					<input name=id class=confirm hidden />
					<input name=valor class=confirm hidden />
					<div class=row id=timestart hidden>
						<div class="col-sm">
							<label for=timestart>timestart</label>
						</div>
						<div class="col-sm">
							<input name=timestart class=confirm />
						</div>
					</div>
					<div class=row id=timeend hidden>
						<div class="col-sm">
							<label for=timeend>timeend</label>
						</div>
						<div class="col-sm">
							<input name=timeend class=confirm />	
						</div>
					</div>
					<input name=series_id class=confirm hidden />
					<input name=tipo class=confirm hidden />
					<span id=csvfile style="display: none;"><label for=csvfile>Importar archivo CSV:</label><input type=file name=csvfile id=csvfile data-toggle="tooltip" title="Los campos deben ser: fechainicial,fechafinal,valor. El formato de fecha es AAAA-MM-DDTHH:MM:SS.000Z en huso horario central (+00) (Formato ISO)"></span>
					<span id=getFromSource style="display: none;">
						
					</span>
					<span id=exportcsv style="display: none;">
						<a download="observaciones.csv"></a><br>
					</span>
					<span id=exportjson style="display: none;">
						<input type=text readonly=true id=exportjsonurl style="width:150px" disabled="disabled">
						<button type=button onclick="copyTextToClipboard('exportjsonurl')">Copiar URL para descarga de JSON</button>
					</span>
					<span id=exportmnemos style="display: none;">
						<input type=text readonly=true id=exportmnemosurl style="width:150px" disabled="disabled">
						<button type=button onclick="copyTextToClipboard('exportmnemosurl')">Copiar URL para descarga de Mnemos</button>
					</span>
					<span id=removeselected style="display: none;"></span>
					<input name=observaciones hidden />
					<input name=series hidden />
					<div class=container id=authentication>
<!--
						<div class=row>
							<div class="col-sm">
								<label for=username>usuario</label>
							</div>
							<div class="col-sm">
								<input name=username type=text />
							</div>
						</div>
						<div class=row>
							<div class=col-sm>
								<label for=password>contraseña</label>
							</div>
							<div class=col-sm>
								<input name=password type=password />
							</div>
						</div>
-->
						<div class=row>
							<button type=submit>Submit</button>
						</div>
					</div>
				</form>
			  </div>
			  <div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
			  </div>
			</div>
		  </div>
		</div>
		<div id="myModalSeries" class="modal fade obs_edit_table_modal" role="dialog">
		  <div class="modal-dialog">
			<div class="modal-content">
			  <div class="modal-header">
				<h4 class="modal-title">Confirma</h4>
				<button type="button" class="close" data-dismiss="modal">&times;</button>
			  </div>
			  <div class="modal-body" id=confirm_modal_body_series>
				<form id=confirm class=confirm action="obs/puntual/series" method=POST target="_blank">
					<input name=id class=confirm hidden />
					<input name=series class=confirm hidden />
					<div class="row new-series" id=tipo hidden>
						<div class=col-sm>
							<label for=series_table>tipo</label>
						</div>
						<div class=col-sm>
							<select name=series_table class="confirm new-series" >
								<option value="series">puntual</option>
								<option value="series_areal">areal</option>
							</select>
						</div>
					</div>
					<div class="row new-series" id=estacion_id hidden>
						<div class=col-sm>
							<label for=estacion_id>estación</label>
						</div>
						<div class=col-sm>
							<select name=estacion_id class="confirm new-series" >
								<option value="">Ninguna</option>
							</select>
						</div>
					</div>
					<div class="row new-series" id=var_id hidden>
						<div class=col-sm>
							<label for=var_id>variable</label>
						</div>
						<div class=col-sm>
							<select name=var_id class="confirm new-series">
								<option value="">Ninguna</option>
							</select>
						</div>
					</div>
					<div class="row new-series" id=proc_id hidden>
						<div class=col-sm>
							<label for=proc_id>procedimiento</label>
						</div>
						<div class=col-sm>
							<select name=proc_id class="confirm new-series">
								<option value="">Ninguna</option>
							</select>
						</div>
					</div>
					<div class="row new-series" id=unit_id hidden>
						<div class=col-sm>
							<label for=unit_id>unidades</label>
						</div>
						<div class=col-sm>
							<select name=unit_id class="confirm new-series">
								<option value="">Ninguna</option>
							</select>
						</div>
					</div>
					<div class="row new-series" id=fuentes_id hidden>
						<div class=col-sm>
							<label for=fuentes_id>fuente</label>
						</div>
						<div class=col-sm>
							<select name=fuentes_id class="confirm new-series">
								<option value="">Ninguna</option>
							</select>
						</div>
					</div>
					<span id=csvfile style="display: none;"><label for=csvfile>Importar archivo CSV:</label><input type=file name=csvfile id=csvfile data-toggle="tooltip" title="Los campos deben ser: estacion_id,var_id,proc_id,unit_id"></span>
					<span id=getFromSource style="display: none;">
						
					</span>
					<span id=exportcsv style="display: none;"><a download="series.csv"></a></span><br>
					<span id=exportjson style="display: none;">
						<input type=text readonly=true id=exportjsonurlseries style="width:150px" disabled="disabled">
						<button type=button onclick="copyTextToClipboard('exportjsonurlseries')">Copiar URL para descarga de JSON</button>
					</span>
					<span id=removeselected style="display: none;"></span>
					<div class=container id=authentication>
						<div class=row>
							<button type=submit>Submit</button>
						</div>
					</div>
				</form>
			  </div>
			  <div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
			  </div>
			</div>
		  </div>
		</div>
		<div id="myModalMetadata" class="modal fade metadata_modal" role="dialog">
		  <div class="modal-dialog">
			<!-- Modal content-->
			<div class="modal-content">
			  <div class="modal-header">
				<h4 class="modal-title">Editar metadatos</h4>
				<button type="button" class="close" data-dismiss="modal">&times;</button>
			  </div>
			  <div class="modal-body" id=confirm_modal_body>
				<form id=confirm class=confirm action="" method=PUT target="_blank">
<!--
					<div id=estacion style="display: none;">
						<h4 id=estacionHeading></h4>
						<div class=row>
							<div class="col-sm">
								<label for=tabla>fuente (red)</label>
							</div>
							<div class="col-sm">
								<select name=tabla class="confirm edit" required disabled="disabled"></select>	
							</div>
						</div>
						<div class=row>
							<div class="col-sm">
								<label for=nombre>nombre</label>
							</div>
							<div class="col-sm">
								<input type=text name=nombre class="confirm edit" required disabled="disabled">
							</div>
						</div>
						<div class=row>
							<div class="col-sm">
								<label for=longitud>longitud</label>
							</div>
							<div class="col-sm">
								<input type=number name=longitud class="confirm edit" required step="0.000000001" disabled="disabled">
							</div>
						</div>
						<div class=row>
							<div class="col-sm">
								<label for=latitud>latitud</label>
							</div>
							<div class="col-sm">
								<input type=number name=latitud class="confirm edit" required step="0.000000001" disabled="disabled">
							</div>
						</div>
						<div class=row>
							<div class="col-sm">
								<label for=cero_ign>altitud/cero de escala</label>
							</div>
							<div class="col-sm">
								<input type=number name=cero_ign class="confirm edit" disabled="disabled" step="0.000000001" style="width: 200px;">
							</div>
						</div>
						<div class=row>
							<div class="col-sm">
								<label for=provincia>provincia</label>
							</div>
							<div class="col-sm">
								<input type=text name=provincia class="confirm edit"  disabled="disabled">
							</div>
						</div>
						<div class=row>
							<div class="col-sm">
								<label for=pais>país</label>
							</div>
							<div class="col-sm">
								<input type=text name=pais class="confirm edit" disabled="disabled">
							</div>
						</div>
						<div class=row>
							<div class="col-sm">
								<label for=rio>río</label>
							</div>
							<div class="col-sm">
								<input type=text name=rio class="confirm edit" disabled="disabled">
							</div>
						</div>
					</div>
					<div class=row>
						<button type=submit>Confirma</button>
					</div>
-->
				</form>
			  </div>
			  <div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
			  </div>
			</div>
		  </div>
		</div>
	</div>
</div>
<div class=container-fluid style="background-color: white"></div>
<div id="popup" class="ol-popup" style="display: none">
  <a href="#" id="popup-closer" class="ol-popup-closer"></a>
  <div id="popup-content"></div>
</div>

<script type="application/javascript" src="js/secciones_functions.js"></script>
<script> 
	$("div#maplegend").hide()
	var global = {}
	$("a[data-toggle=tab]").click(evt=>{
		setTimeout(()=>window.dispatchEvent(new Event('resize')),500)
	})
	$("section#selector").on('show.bs.collapse',()=>{
		$("a#selectorToggle").text("ocultar filtros")
	})
	.on('hide.bs.collapse',()=>{
		$("a#selectorToggle").text("mostrar filtros")
	})
	.collapse('show')
	$("a#toggleAddFilters").click(()=>{
		$("div.additionalFilters").toggle()
		if($("div.additionalFilters:visible").length) {
			$("div.additionalFilters .form-control").removeAttr("disabled")
			$("div.prono-group .form-control").removeAttr("disabled")
			$("div.prono-group2 .form-control").removeAttr("disabled")
			$("a#toggleAddFilters").text("menos filtros")
			if($(".form-control[name=has_prono]").prop("checked")) {
				$("div.prono-group").show()	
				if(global.show_forecast_date) {
					$("div.prono-group2").show()
				}
			}
		} else {
			$("div.additionalFilters .form-control").attr("disabled","disabled")
			$("div.prono-group .form-control").attr("disabled","disabled")
			$("div.prono-group2 .form-control").attr("disabled","disabled")
			$("div.prono-group").hide()
			$("div.prono-group2").hide()
			$("a#toggleAddFilters").text("más filtros")
		}
		return false
	})
	$(document).ready(function(){
		// default config
		var default_config = {{{config}}}
		global.default_config = default_config
		$("div.additionalFilters").toggle()
		  // set/load activeTab to/from localStorage
		$(".prono-group").hide()
		$(".prono-group2").hide()
		$("body").css("cursor","progress")
		$('div.tab-content').show()
	    $('a[data-toggle="tab"]').on('show.bs.tab', function(e) {
			localStorage.setItem('activeTab', $(e.target).attr('href'));
		});
		var activeTab = localStorage.getItem('activeTab');
		if(activeTab){
			$('a[href="' + activeTab + '"]').tab('show');
		}
		$("form#selectorform select#seriesId").select2();  // Add browse filter to select
		$("form#selectorform select#varId").select2();  // Add browse filter to select
		$("form#selectorform select#redId").select2();  // Add browse filter to select
		$("form#choosepercentile select[name=percentil]").select2()
		$("form#selectorform select#fuentesId").select2()

		// read urlParams
		const urlParams = new URLSearchParams(window.location.search);
		global.urlParams = {}
		for(var pair of urlParams.entries()){
			global.urlParams[pair[0]] =pair[1]
		}
		// set selected filters
		const search_filters = {}
		$("form#selectorform select").each((i,s)=>{
			var key = s.name
			if (urlParams.get(key)) {
				search_filters[key] = urlParams.get(key)
			} else if (urlParams.get('fuentesId') && urlParams.get('fuentesId') != "" && default_config.filters_areal && default_config.filters_areal[key]) {
				search_filters[key] = default_config.filters_areal[key].default
			} else if (default_config.filters[key]) {
				search_filters[key] = default_config.filters[key].default
			}
		})
		$("form#selectorform input").each((i,s)=>{
			var key = s.name
			if (urlParams.get(key)) {
				search_filters[key] = urlParams.get(key)
			} else if (urlParams.get('fuentesId') && urlParams.get('fuentesId') != "" && default_config.filters_areal && default_config.filters_areal[key]) {
				search_filters[key] = default_config.filters_areal[key].default
			} else if (default_config.filters[key]) {
				search_filters[key] = default_config.filters[key].default
			}
		})
		if(search_filters.fuentesId) {
			search_filters.tipo = "areal"
			if(!search_filters.procId && default_config.filters_areal && default_config.filters_areal.procId) {
				search_filters.procId = default_config.filters_areal.procId.default
			}
		} else {
			search_filters.tipo = "puntual"
			if(!search_filters.procId && default_config.filters_puntual && default_config.filters_puntual.procId) {
				search_filters.procId = default_config.filters_puntual.procId.default
			}
		}
		global.search_filters = search_filters

		var timestart, timeend
		if(search_filters.timestart) {
			$("input#timestart").val(search_filters.timestart.substring(0,10))
		} 
		if(search_filters.timeend) {
			$("input#timeend").val(search_filters.timeend.substring(0,10))
		}
		if(search_filters.seriesId) {
			$("form#selectorform select[name=seriesId]").append("<option value=" + search_filters.seriesId + " selected />")
		}
		var bbox_data = {}
		for(var i of ["west","east","south","north"]) {
			if(search_filters[i]) {
				$("input[name=" + i + "]").val(search_filters[i])
				bbox_data[i] = search_filters[i]
			} 
		}
		if(search_filters.estacionId) {
			$("form#selectorform select[name=estacionId]").append($('<option>',{
				value: search_filters.estacionId,
				text: search_filters.estacionId,
				selected: "selected"
			}))
		}
		 
		document.getElementById('popup').style.display = "block"
		var container = document.getElementById('popup');
		var content = document.getElementById('popup-content');
		global.content = content
		var closer = document.getElementById('popup-closer');
		/**
		 * Create an overlay to anchor the popup to the map.
		 */
		var overlay = new ol.Overlay({
		  element: container,
		  autoPan: true,
		  autoPanAnimation: {
			duration: 250
		  }
		});
		global.overlay = overlay
		

		/**
		 * Add a click handler to hide the popup.
		 * @return {boolean} Don't follow the href.
		 */
		closer.onclick = function() {
		  $('div.popover').remove()
		  global.overlay.setPosition(undefined);
		  closer.blur();
		  return false;
		};

		// box draw
		var box_source = new ol.source.Vector({wrapX:false})
		var box_layer = new ol.layer.Vector({
			source: box_source,
			zIndex: 2
		})

			
		// instantiate openlayers map object
		var map = new ol.Map({
			target: 'map',
			layers: [
			  //~ new ol.layer.Tile({
				//~ source: new ol.source.OSM()
			  //~ })
			  new ol.layer.Tile({
				  source: new ol.source.XYZ({
					  url: "https://api.mapbox.com/styles/v1/jbianchi/ckyso80451sba14thm4lenny3/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoiamJpYW5jaGkiLCJhIjoiY2prbWttdmJvMDJiNTNwb2V0NzU0NDdmaCJ9.u5_KzyKkY9FRfCcJjAF6gA"
				  })
			  }),
			  box_layer
			],
			overlays: [global.overlay],
			view: new ol.View({
			  center: [-55, -25],  // feature[0].getGeometry().getCoordinates(), // ol.proj.fromLonLat([geom.geometry.coordinates[0],geom.geometry.coordinates[1]]),
			  projection: 'EPSG:4326',
			  zoom: 5
			})
		});
		if(default_config.wms_areas) {
			global.areas_layer = new ol.layer.Tile({
				source: new ol.source.TileWMS({
				extent: [-70,-40,-40,-10],
					url: default_config.wms_areas.endpoint,
					params: { 'LAYERS': default_config.wms_areas.layers, 'TILED': true},
					serverType: 'geoserver'
				})
			})
			map.addLayer(global.areas_layer)			
			if(default_config.wms_areas_hide) {
				global.areas_layer.setVisible(false)
			}
			$("label#toggleAreasLayerVisibilityLabel").removeAttr("hidden")
			$("input.toggleAreasLayerVisibility").on("change", ()=>{
				if(global.areas_layer) {
					var visible = global.areas_layer.getVisible()
					if(visible) {
						global.areas_layer.setVisible(false)
					} else {
						global.areas_layer.setVisible(true)
					}
				}
			})
		}
		global.map = map
		var toggleDraw = document.getElementById("toggleDrawLabel")
		// var toggleDraw = document.createElement("input")
		// toggleDraw.type = "checkbox"
		// toggleDraw.id = "toggleDraw"
		// toggleDraw.checked = false
		// toggleDraw.title='habilitar rectángulo de búsqueda'
		// toggleDraw.classList.add("toggleDraw")
		var toggleDrawControl = new ol.control.Control({
			element: toggleDraw
		});
		map.addControl(toggleDrawControl);
		//  $("input#toggleDraw").css("position","absolute")
		// $("input#toggleDraw").css("left",60)
		// $("input#toggleDraw").css("top",10)
		let draw
		$("input#toggleDraw").on("change",function(e) {
			if (e.target.checked == false) {
				map.removeInteraction(draw)
				$("label[for=toggleDraw]").css("background-color","white")
				// layerEstaciones.zIndex = 1
			} else {
				map.addInteraction(draw)
				$("label[for=toggleDraw]").css("background-color","#2196F3")
				// layerEstaciones.zIndex = 0
			}
		})
		function addInteraction() {
			draw = new ol.interaction.Draw({
      			source: box_source,
      			type: "Circle",
				geometryFunction: ol.interaction.Draw.createBox(),
			})
			// map.addInteraction(draw)
		}
		addInteraction()
		draw.on('drawend',function(e){
			var coordinates = e.feature.getGeometry().getCoordinates()
			console.log(coordinates)
			var west = coordinates[0].map(p=>p[0]).reduce((a,b)=> Math.min(a,b),180)
			var east = coordinates[0].map(p=>p[0]).reduce((a,b)=> Math.max(a,b),-180)
			var south = coordinates[0].map(p=>p[1]).reduce((a,b)=> Math.min(a,b),90)
			var north = coordinates[0].map(p=>p[1]).reduce((a,b)=> Math.max(a,b),-90)
			$("input.form-control[name=west]").val(west)
			$("input.form-control[name=east]").val(east)
			$("input.form-control[name=south]").val(south)
			$("input.form-control[name=north]").val(north)
			
		});
		draw.on('drawstart',function(e){
			box_source.clear()
		})
		if(Object.keys(bbox_data).length == 4) {
			var coordinates = [[[bbox_data.west,bbox_data.north],[bbox_data.west,bbox_data.south],[bbox_data.east,bbox_data.south],[bbox_data.east,bbox_data.north],[bbox_data.west,bbox_data.north]]]
			// box_source.clear()
			box_source.addFeature(new ol.Feature({geometry:new ol.geom.Polygon(coordinates)}))
		}
		$("button#clearGeom").click(()=>{
			$("input.form-control[name=west]").val("")
			$("input.form-control[name=east]").val("")
			$("input.form-control[name=south]").val("")
			$("input.form-control[name=north]").val("")
			box_source.clear()
		})

		var estaciones_tipo = (search_filters.fuentesId) ? "areal" : "puntual"

		setGeneralCategoryOption(search_filters.generalCategory)

		// get var list
		getVarList(search_filters.varId,estaciones_tipo,search_filters.generalCategory)

		$("form#selectorform select[name=generalCategory]").change(event=>{
			var generalCategory = $("form#selectorform select[name=generalCategory]").val()
			getVarList(search_filters.varId,estaciones_tipo,generalCategory)
			$("form#selectorform select[name=seriesId]").val("")
		})


		$("form#selectorform select[name=varId]").change(event=>{
			$("form#selectorform select[name=seriesId]").val("")
			$(event.target).parents("form").submit()
		})

		$("form#selectorform select[name=fuentesId]").change(event=>{
			$("form#selectorform select[name=seriesId]").val("")
			$("form#selectorform select[name=estacionId]").val("").trigger("change")
			setSeriesTypeMode()

		})

		$("form#selectorform select[name=redId]").change(event=>{
			$("form#selectorform select[name=seriesId]").val("")
		})

		getFuentesPuntual(search_filters)

		getFuentesAreal(search_filters)

		// else {
			//loadEstacionesOptions(search_filters)
		//}

		getCalibradosGrupos(search_filters)
		
		getCalibrados(search_filters)

		// agrega popup2 hover
		$("div#map").append(
			$('<div id="popup2" class="ol-popup-hover" style="display: none;"></div>').append(
				$('<div id="popup-content2"></div>')
			)
		)
		var container2 = new ol.Overlay({
			element: document.getElementById("popup2")
		});
		global.container2 = container2
		map.addOverlay(container2)
	
		$("input.form-control[name=has_prono]").change((evt)=>{
			if(evt.target.checked) {
				$(".prono-group").show()
			} else {
				$(".prono-group").hide()
			}
		})

		// global objects
		var gSeries, gPoints

		var [get_monitored_url, monitoredpointsparams,estaciones_feature_type] = getMonitoredPointParams(search_filters)
		setEstacionIdSelect()
		setChooseAddSeriesSelect(get_monitored_url,Object.assign({}, monitoredpointsparams, {estacion_id: undefined}))
		
		if(global.default_config.use_wms) {
			// add estaciones_series map (wms)
			addEstacionesSeriesWms(search_filters)
		} else {
			// get monitored points 	
			getMonitoredPoints(get_monitored_url,monitoredpointsparams,estaciones_feature_type)
		}
		global.isWriter = {{writer}}
		
		global.monitoredpointsparams = monitoredpointsparams
			
		makeSeriesEditTable($("div.tabcontent#tabla_series"),undefined,{{writer}},monitoredpointsparams.tipo,global.default_config.series_page_size)

		if(search_filters.seriesId) {
			loadSerie(search_filters) // ,matched_point)
		}

					// show legend
			//~ console.log("show map")
		
			
			//~ descarga listado estaciones/var
		var getMonitoredPointsUrl = get_monitored_url + "?format=geojson&" + new URLSearchParams(global.monitoredpointsparams).toString()
//		if(search_filters.fuentesId) {
//			getMonitoredPointsUrl += "&fuentes_id=" + search_filters.fuentesId
//			$("#descargarPoints").attr("download","series.geojson")
//		} else {
//			$("#descargarPoints").attr("download","series.geojson")
//		}
		$("#descargarPoints").attr('href',getMonitoredPointsUrl).html(getMonitoredPointsUrl)
	})
	function setGeneralCategoryOption(generalCategory) {
		if(generalCategory) {
			$(`form#selectorform select[name=generalCategory] option[value="${generalCategory}"]`).attr("selected","selected")
		}
		$("form#selectorform select#generalCategory").select2();  // Add browse filter to select

	}

	function addEstacionesSeriesWms(search_filters) {
		var params = {} // {'LAYERS': 'public:estaciones_con_series'}
		var viewparams = {}
		if(search_filters.generalCategory) {
			viewparams.GeneralCategory = search_filters.generalCategory
		} else if (global.default_config.filters && global.default_config.filters.generalCategory) {
			viewparams.GeneralCategory = global.default_config.filters.generalCategory
		}
		if(search_filters.varId) {
			viewparams.var_id = search_filters.varId
		} else if (global.default_config.filters && global.default_config.filters.varId) {
			viewparams.var_id = global.default_config.filters.varId
		}
		if(search_filters.redId) {
			viewparams.red_id = search_filters.redId
		} else if (global.default_config.filters && global.default_config.filters.redId) {
			viewparams.red_id = global.default_config.filters.redId
		}
		if(search_filters.estacionId) {
			viewparams.estacion_id = search_filters.estacionId
		} else if (global.default_config.filters && global.default_config.filters.estacionId) {
			viewparams.estacion_id = global.default_config.filters.estacionId
		}
		if(search_filters.fuentesId) {
			viewparams.fuentes_id = search_filters.fuentesId
			params.LAYERS = "public:areas_con_series"
			var estaciones_feature_type = "polygon"
			var tipo = "areal"
		} else {
			params.LAYERS = "public:estaciones_con_series"
			var estaciones_feature_type = "point"
			var tipo = "puntual"
		}
		if ($("input#timestart").val() != "") {
			viewparams.timestart = $("input#timestart").val()
		}
		if ($("input#timeend").val() != "") {
			viewparams.timeend = $("input#timeend").val()
		}
		if (search_filters.data_availability) {
			viewparams.data_availability = search_filters.data_availability
			// $("input.form-control[name=has_obs]").prop("checked",true)
			$("select.form-control[name=data_availability]").val(search_filters.data_availability)
		} else {
			viewparams.data_availability = undefined
			$("select.form-control[name=data_availability]").val(undefined)
		}
		if(search_filters.has_prono) {
			$("input.form-control[name=has_prono]").prop("checked",true)
			$(".prono-group").show()
			viewparams.has_prono = search_filters.has_prono
			if(search_filters.cal_grupo_id) {
				viewparams.cal_grupo_id = search_filters.cal_grupo_id
			}
			if(search_filters.cal_id) {
				viewparams.cal_id = search_filters.cal_id
			}
		}
		var extent = [-70, -40, -40, -10]
		if(search_filters.west && search_filters.west != "") {
			viewparams.west = parseFloat(search_filters.west)
			extent[0] = parseFloat(search_filters.west)
		}
		if(search_filters.south && search_filters.east != "") {
			viewparams.south = parseFloat(search_filters.south) 
			extent[1] = parseFloat(search_filters.south)
		}
		if(search_filters.east && search_filters.east != "") {
			viewparams.east = parseFloat(search_filters.east)
			extent[2] = parseFloat(search_filters.east)
		}
		if(search_filters.north && search_filters.north != "") {
			viewparams.north = parseFloat(search_filters.north) 
			extent[3] = parseFloat(search_filters.north)
		}
		params.viewparams = Object.keys(viewparams).map(key=>{
			return `${key}:${viewparams[key]}`
		}).join(";")
		global.estaciones_wms_layer = new ol.layer.Image({
			extent: extent,
			source: new ol.source.ImageWMS({
				url: global.default_config.endpoints.geoserver.wms,
				params: params,
				ratio: 1,
				serverType: 'geoserver',
			})
		})
		global.map.addLayer(global.estaciones_wms_layer)
		global.map.on("singleclick", evt => mapOnSingleClick(evt))		
		$("div#maplegend").show()	
	}

	function getMonitoredPointParams(search_filters) {
		var monitoredpointsparams = {} // {geojson:true}
		if(search_filters.varId) {
			monitoredpointsparams.var_id = search_filters.varId
		} else if (global.default_config.filters && global.default_config.filters.varId) {
			monitoredpointsparams.var_id = global.default_config.filters.varId
		}
		if(search_filters.estacionId) {
			monitoredpointsparams.estacion_id = search_filters.estacionId
		} else if (global.default_config.filters && global.default_config.filters.estacionId) {
			monitoredpointsparams.estacion_id = global.default_config.filters.estacionId
		}
		if(search_filters.tipo) {
			monitoredpointsparams.tipo = search_filters.tipo
		}
		if(search_filters.fuentesId) {
			monitoredpointsparams.fuentes_id = search_filters.fuentesId
			var get_monitored_url = "obs/areal/series"
			var estaciones_feature_type = "polygon"
			monitoredpointsparams.tipo = "areal"
		} else if(monitoredpointsparams.tipo == "areal") {
			alert("Falta fuentesId. Por favor seleccione uno para realizar la búsqueda de series areales")
		} else {
			if(search_filters.redId) {
				monitoredpointsparams.red_id = search_filters.redId
			} else if (global.default_config.filters && global.default_config.filters.redId) {
				monitoredpointsparams.red_id = global.default_config.filters.redId
			}
			var get_monitored_url = "obs/puntual/series"
			var estaciones_feature_type = "point"
			monitoredpointsparams.tipo = "puntual"
		}
		if(search_filters.procId) {
			monitoredpointsparams.proc_id = search_filters.procId
		}
		monitoredpointsparams.timestart=$("input#timestart").val()
		monitoredpointsparams.timeend=$("input#timeend").val()
		if (search_filters.data_availability) {
			monitoredpointsparams.data_availability = search_filters.data_availability
			// $("input.form-control[name=has_obs]").prop("checked",true)
			$("select.form-control[name=data_availability]").val(search_filters.data_availability)
		} else {
			monitoredpointsparams.data_availability = undefined
			$("select.form-control[name=data_availability]").val(undefined)
		}
		if(search_filters.has_prono) {
			$("input.form-control[name=has_prono]").prop("checked",true)
			$(".prono-group").show()
			monitoredpointsparams.has_prono = search_filters.has_prono
			if(search_filters.cal_grupo_id) {
				monitoredpointsparams.cal_grupo_id = search_filters.cal_grupo_id
			}
			if(search_filters.cal_id) {
				monitoredpointsparams.cal_id = search_filters.cal_id
			}
		}
		if(search_filters.north && search_filters.south && search_filters.east && search_filters.west) {
			monitoredpointsparams.geom = search_filters.west + "," +  search_filters.south + "," +  search_filters.east + "," + search_filters.north 
		}
		if(search_filters.generalCategory) {
			monitoredpointsparams.GeneralCategory = search_filters.generalCategory
		}
		// if(search_filters.limit) {
		//	monitoredpointsparams.limit = search_filters.limit
		//} else
		//if (global.default_config.series_page_size) {
		//	monitoredpointsparams.limit = global.default_config.series_page_size
		//}
		global.monitoredpointsparams = monitoredpointsparams
		return [get_monitored_url,monitoredpointsparams,estaciones_feature_type]
	}

	function setEstacionIdSelect() {
		$("form#selectorform select#estacionId").select2({
			minimumInputLength: 0,
			allowClear: true,
			placeholder: "--- Todas ---",
			ajax: {
   				url: function() {
					return getEstacionesUrl()
				}, //?' + new URLSearchParams(monitoredpointsparams).toString(),
    			dataType: 'json',
    			data: function (params) {
					const search_filters = getSearchFilters()
					var query = {
						GeneralCategory: search_filters.generalCategory,
						var_id: search_filters.varId,
						red_id: search_filters.fuentesId == "" ? search_filters.redId : undefined,
						tipo: search_filters.tipo,
						proc_id: search_filters.fuentesId == "" ? global.search_filters.procId : undefined,
						timestart: search_filters.timestart,
						timeend: search_filters.timeend,
						data_availability: search_filters.data_availability,
						fuentes_id: search_filters.fuentesId, 
						estacion_id: undefined,
						no_metadata: true,
						pagination: true,
						format: undefined,
						no_geom: true,
						limit: global.default_config.series_page_size, // 250
						offset: (params.page) ? (params.page - 1) * global.default_config.series_page_size : 0
					}
					if(/^\s*$/.test(params.term)) {
						query.search = undefined
					} else if(isNaN(params.term)) {
						query.search = params.term
					} else {
						query.estacion_id = parseInt(params.term)
					}
					return query
				},
				processResults: function (data) {
					// Transforms the top-level key of the response object from 'items' to 'results'
					const results = {}
					for(var r of data.rows) {
						if(results[r.estacion_id]) {
							// Skips non unique estacion
							continue
						}
						if(r.tipo == "puntual") {
							results[r.estacion_id] = {
								id: r.estacion_id,
								text: `${r.estacion_id}: ${(r.rio) ? `${r.rio}@` : ""}${r.estacion_nombre}` //  (${r.var_nombre}) [${r.series_id}]
							} 
						} else {
							results[r.estacion_id] = {
								id: r.estacion_id,
								text: `${r.estacion_id}: ${r.estacion_nombre}` // (${r.var_nombre}) [${r.series_id}]`
							}				
						}
					}
					return {
						results: Object.keys(results).map(key=>{
							return results[key]
						}),
						pagination: {
							more: (data.is_last_page) ? false : true
						} 
					}
				},
				delay: 500
  			}
		})
	}

	function setChooseAddSeriesSelect(url,monitoredpointsparams) {
		$("form#chooseaddseries select[name=series_id]").select2({
			minimumInputLength: 3,
			ajax: {
   				url: url, //?' + new URLSearchParams(monitoredpointsparams).toString(),
    			dataType: 'json',
    			data: function (params) {
					var query = {...monitoredpointsparams}
					query.search = params.term
					query.no_metadata = true
					query.pagination = true
					query.format = undefined
					query.no_geom = true
					query.limit = global.default_config.series_page_size // 250
					query.offset = (params.page) ? (params.page - 1) * global.default_config.series_page_size : 0 
					return query
				},
				processResults: function (data) {
					// Transforms the top-level key of the response object from 'items' to 'results'
					return {
						results: data.rows.map(r=>{
							return {
								id: r.series_id,
								text: `${r.estacion_id}: ${(r.rio) ? r.rio : ""}@${r.estacion_nombre} (${r.var_nombre}) [${r.series_id}]`
							} 
						}),
						pagination: {
							more: (data.is_last_page) ? false : true
						} 
					}
				},
				delay: 500
  			}
		})
	}
	function getMonitoredPoints(get_monitored_url,monitoredpointsparams,estaciones_feature_type) {
		const params = {format: "geojson", pagination: true, include_geom: true, ...monitoredpointsparams}
		$.get(get_monitored_url,params)
		.then(points=>{
			$("body").css("cursor","default")
			if(!points || !points.features) {
				alert("0: No se encontraron series")
			} else if (points.features.length == 0) {
				alert("1: No se encontraron series")
			}
			$("button#refresh").removeAttr("disabled")
			gPoints = points
				// read points from GeoJSON and add layer to map
			if(points.features.length) {
				var featEstaciones = (new ol.format.GeoJSON()).readFeatures(points)
				var sourceEstaciones = new ol.source.Vector({
					projection: 'EPSG:4326',
					features: featEstaciones
				})			
				layerEstaciones = new ol.layer.Vector({
					source: sourceEstaciones,
					style: (estaciones_feature_type == "point") ? styleFunction : polygonStyleFunction,
					zIndex: 1
				})
				
				global.map.addLayer(layerEstaciones)
				//add map click interaction: popup table. Then clicking any row refreshes page with the corresponding data
				global.map.on("singleclick", evt => mapOnSingleClickClientSide(evt))
			
				//add map click interaction: popup table. Then clicking any row refreshes page with the corresponding data
				// add map interaction on hover point change cursor to pointer & display station name and id
				global.map.on('pointermove', evt => mapOnPointerMove(evt))
				// add listener to maptab: on click update map size
				$(".nav-tabs a#maptab").on('shown.bs.tab', function(e){
					global.map.updateSize()
				})

				if(!points.is_last_page && points.next_page_url) {
					loadPointsNextPage(points.next_page_url,points,sourceEstaciones,{{writer}})
				}
			}
			$("div#maplegend").show()
				// llena tabla de series
				
			//	gPoints.sortSeries = function() {
			//		gPoints.sort( (a,b)=>{
			//			if (a.estacion_id < b.estacion_id) {
			//				return -1
			//			} else if (a.estacion_id > b.estacion_id) {
			//				return 1
			//			} else { // misma estacion
			//				if(a.var_id < b.var_id) {
			//					return -1
			//				} else {
			//					return 1
			//				}
			//			}
			//		})
			//	}

			
			
				// var flag=false
				// var matched_point
				// var table_rows = []
				// var options = points.features.map(p=>{
				// 	var selected=false
				// 	if(search_filters.seriesId) {
				// 		if(p.properties.series_id == search_filters.seriesId) {
				// 			//~ console.log(p.properties)
				// 			flag=true
				// 			selected=true
				// 			matched_point=p
				// 		}
				// 	} 
				// 	var name = p.properties.estacion_id + ": " + ((p.properties.rio) ? p.properties.rio + "@" : "") + ((p.properties.nombre) ? p.properties.nombre.substring(0,30) : p.properties.estacion_id) + " (" + p.properties.var_name + ") [" + p.properties.series_id + "]"
				// 	return "<option value="+p.properties.series_id + " " + ((selected) ? "selected" : "" ) + " >" + name + "</option>"
				// })
				// $("select#seriesId").append(options.join(""))
				// $("form#chooseaddseries select[name=series_id]").append(options.join(""))
			
				// if(!flag) {
				// 	console.log("seriesId not found")
				// 	return
				// }
		}).fail(e=>{
			$("body").css("cursor","default")
		 	alert(e.message)
		})
	}
	function loadSerie(search_filters,matched_point) {
		var timestart, timeend
		if(!search_filters.timestart) {
			timestart = new Date()
			timestart.setDate(timestart.getDate() - 90)
		} else {
			timestart = new Date(search_filters.timestart)
			//~ console.log("timestart from querystring")
		}
		if(!search_filters.timeend) {
			timeend = new Date()
			timeend.setDate(timeend.getDate() +15)
		} else {
			timeend = new Date(search_filters.timeend)
			//~ console.log("timeend from querystring")
		}
		//~ console.log({estacion_id:matched_point.properties.estacion_id, var_id: matched_point.properties.var_id, ts:timestart, ts:timeend})
		$("input#timestart").val(timestart.toISOString().substring(0,10))
		$("input#timeend").val(timeend.toISOString().substring(0,10))
		$("form#chooseaddseries input[name=timestart]").val(timestart.toISOString().substring(0,10))
		$("form#chooseaddseries input[name=timeend]").val(timeend.toISOString().substring(0,10))
		$("form#choosepercentile input[name=timestart]").val(timestart.toISOString().substring(0,10))
		$("form#choosepercentile input[name=timeend]").val(timeend.toISOString().substring(0,10))
		$("body").css("cursor","progress")
		var getSeriesParams = {
			series_id: search_filters.seriesId, 
			tipo: search_filters.tipo, 
			timestart:timestart, 
			timeend:timeend, 
			includeProno:true, 
			stats:"monthly",
			get_cal_stats: global.default_config.get_cal_stats
		} // {estacion_id:matched_point.properties.estacion_id, var_id:matched_point.properties.var_id, timestart:timestart, timeend:timeend, includeProno:true,proc_id:matched_point.properties.proc_id,stats:"monthly"}
		if(search_filters.forecast_date) {
			getSeriesParams.forecast_date = search_filters.forecast_date
		}
		$.get("getSeriesBySiteAndVar",getSeriesParams) // , true, "1 days")
		.then(series=>{
			$("body").css("cursor","default")
			$("section#selector").collapse("hide")
			$("section#series_banner").html('<h2 style="text-align: center">' + series.var.nombre + ' en ' + series.estacion.nombre + '</h2>').collapse("show")
			if(series.tipo == "areal") {
				$("section#series_banner h2").append(` (${series.fuente.nombre})`)
			}
			gSeries = series
			var obs_stats = getSerieStats(series.observaciones)
			// series.request_params = {estacion_id:matched_point.properties.estacion_id, var_id:matched_point.properties.var_id, timestart:timestart, timeend:timeend, includeProno:true,proc_id:matched_point.properties.proc_id}
			var prono_resumen = getPronoResumen(series)
			//~ var general = {id:series.id, tipo: series.tipo, estacion: series.estacion, variable: series["var"], procedimiento: series.procedimiento, unidades: series.unidades, obs_stats: obs_stats, prono_resumen: prono_resumen}
			var download_url = "obs/" + series.tipo + "/series/" + series.id
			$("div#general ul#general").append(
				$("<li></li>").append(
					$('<h3 id=p_serie>Serie <a title=descargar class="metadata-edit-button" href="' + download_url + '" download><i class="material-icons">download</i></a></h3>'),
						$("<ul></ul>").append(
							$("<li>id de serie: <b>" + series.id + "</b></li>"),
							$("<li>tipo de serie: <b>" + series.tipo + "</b></li>")
					)
				)
			)
			
			if (series.estacion) {
				if(series.tipo == "puntual") {
					$("div#general ul#general").append(
						$("<li></li>").append(
							$('<h3 id=p_estacion>Estación <button type=button title=editar id=estacion class="metadata-edit-button" style="display: none;"><i class="material-icons" id=estacion>&#xE254;</i></button></h3>'),
							$("<ul></ul>").append(
								$("<li>fuente: <b>" + series.estacion.tabla + "</b></li>"),
								$("<li>id: <b>" + series.estacion.id + "</b></li>"),
								$("<li>nombre: <b>" + series.estacion.nombre + "</b></li>"),
								$("<li>id_externo: <b>" + series.estacion.id_externo + "</b></li>"),
								$("<li>longitud: <b>" + series.estacion.geom.coordinates[0] + "</b></li>"),
								$("<li>latitud: <b>" + series.estacion.geom.coordinates[1] + "</b></li>"),
								$("<li>altitud: <b>" + series.estacion.altitud + "</b></li>"),
								$("<li>cero de escala: <b>" + series.estacion.cero_ign + "</b></li>"),
								$("<li>provincia: <b>" + series.estacion.provincia + "</b></li>"),
								$("<li>pais: <b>" + series.estacion.pais + "</b></li>"),
								$("<li>rio: <b>" + series.estacion.rio + "</b></li>"),
								$("<li>automatica: <b>" + series.estacion.automatica + "</b></li>"),
								$("<li>propietario: <b>" + series.estacion.propietario + "</b></li>"),
								$("<li>abreviatura: <b>" + series.estacion.abreviatura + "</b></li>"),
								$("<li>URL: <b>" + series.estacion.URL + "</b></li>"),
								$("<li>localidad: <b>" + series.estacion.localidad + "</b></li>"),
								$("<li>real: <b>" + series.estacion.real + "</b></li>"),
								$("<li>nivel_alerta: <b>" + series.estacion.nivel_alerta + "</b></li>"),
								$("<li>nivel_evacuacion: <b>" + series.estacion.nivel_evacuacion + "</b></li>"),
								$("<li>nivel_aguas_bajas: <b>" + series.estacion.nivel_aguas_bajas + "</b></li>")
					)))
				} else if (series.tipo == "areal") {
					$("div#general ul#general").append(
						$("<li></li>").append(
							$('<h3 id=p_estacion>Área <button type=button title=editar id=area class="metadata-edit-button" style="display: none;"><i class="material-icons" id=area>&#xE254;</i></button></h3>'),
							$("<ul></ul>").append(
								$("<li>id: <b>" + series.estacion.id + "</b></li>"),
								$("<li>nombre: <b>" + series.estacion.nombre + "</b></li>"),
								$("<li>límite oeste: <b>" + Math.min(...series.estacion.geom.coordinates[0].map(p=>p[0])) + "</b></li>"),
								$("<li>límite sur: <b>" + Math.min(...series.estacion.geom.coordinates[0].map(p=>p[1])) + "</b></li>"),
								$("<li>límite este: <b>" + Math.max(...series.estacion.geom.coordinates[0].map(p=>p[0])) + "</b></li>"),
								$("<li>límite norte: <b>" + Math.max(...series.estacion.geom.coordinates[0].map(p=>p[1])) + "</b></li>"),
								$("<li>latitud exutorio: <b>" + ((series.estacion.exutorio) ? series.estacion.exutorio.coordinates[0] : "") + "</b></li>"),
								$("<li>longitud exutorio: <b>" + ((series.estacion.exutorio) ? series.estacion.exutorio.coordinates[1] : "") + "</b></li>"),
								$("<li>exutorio_id: <b>" + ((series.estacion.exutorio_id) ? series.estacion.exutorio_id : "") + "</b></li>"),
								$("<li>area (km^2): <b>" + ((series.estacion.area) ? Math.round(parseInt(series.estacion.area) * 0.0001 ) / 100 : "") + "</b></li>")
					)))

				} else if(series.tipo == "raster") {
					$("div#general ul#general").append(
						$("<li></li>").append(
							$('<h3 id=p_estacion>Escena <button type=button title=editar id=estacion class="metadata-edit-button" style="display: none;"><i class="material-icons" id=estacion>&#xE254;</i></button></h3>'),
							$("<ul></ul>").append(
								$("<li>id: <b>" + series.estacion.id + "</b></li>"),
								$("<li>nombre: <b>" + series.estacion.nombre + "</b></li>"),
								$("<li>límite oeste: <b>" + Math.min(series.estacion.geom.coordinates[0].map(p=>p[0])) + "</b></li>"),
								$("<li>límite sur: <b>" + Math.min(series.estacion.geom.coordinates[0].map(p=>p[1])) + "</b></li>"),
								$("<li>límite este: <b>" + Math.max(series.estacion.geom.coordinates[0].map(p=>p[0])) + "</b></li>"),
								$("<li>límite norte: <b>" + Math.max(series.estacion.geom.coordinates[0].map(p=>p[1])) + "</b></li>")
					)))

				}
			}
			
			if(series["var"]) {
				var timeSupport = (series["var"].timeSupport) ? interval2string(series["var"].timeSupport) : 'null'
				var defHoraCorte = (series["var"].def_hora_corte) ? interval2string(series["var"].def_hora_corte) : 'null'
				$("div#general ul#general").append(
					$("<li></li>").append(
						$('<h3 id="p_variable">Variable <button type=button title=editar id=var class="metadata-edit-button" style="display: none;"><i class="material-icons" id=var>&#xE254;</i></button></h3>'),
						$("<ul></ul>").append(
							$("<li>id: <b>" + series["var"].id + "</b></li>"),
							$("<li>código: <b>" + series["var"].var + "</b></li>"),
							$("<li>nombre: <b>" + series["var"].nombre + "</b></li>"),
							$("<li>abreviatura: <b>" + series["var"].abrev + "</b></li>"),
							$("<li>tipo: <b>" + series["var"].type + "</b></li>"),
							$("<li>dataType: <b>" + series["var"].datatype + "</b></li>"),
							$("<li>valueType: <b>" + series["var"].valueType + "</b></li>"),
							$("<li>generalCategory: <b>" + series["var"].GeneralCategory + "</b></li>"),
							$("<li>VariableName: <b>" + series["var"].VariableName + "</b></li>"),
							$("<li>sampleMedium: <b>" + series["var"].SampleMedium + "</b></li>"),
							$("<li>timeSupport: <b>" + timeSupport + "</b></li>"),
							$("<li>timeSupport: <b>" + defHoraCorte + "</b></li>")
				)))
			}
			if(obs_stats) {
				$("div#general ul#general").append(
					$("<li></li>").append(
						$('<h3 id="p_obs">Observaciones (estadísticas)</h3>'),
						$("<ul></ul>").append(
							$("<li>Fecha inicial: <b>" + obs_stats.timestart + "</b></li>"),
							$("<li>Fecha final: <b>" + obs_stats.timeend + "</b></li>"),
							$("<li>Cantidad de registros: <b>" + obs_stats.count + "</b></li>"),
							$("<li>Valor mínimo: <b>" + obs_stats.min + "</b></li>"),
							$("<li>Valor máximo: <b>" + obs_stats.max + "</b></li>"),
							$("<li>Valor medio: <b>" + obs_stats.avg + "</b></li>"),
							$("<li>Valores nulos: <b>" + obs_stats.nulls + "</b></li>")
				)))
			} else {
				$("div#general ul#general").append(
					$("<li></li>").append(
						$('<h3 id="p_obs">No hay observaciones</h3>')
				))
			}
			if(series.percentiles_ref && Object.keys(series.percentiles_ref).length) {
				$("div#general ul#general").append(
					$("<li></li>").append(
						$('<h3 id="p_obs">Valores de referencia (percentiles)</h3>'),
						$("<ul></ul>").append(
							Object.entries(series.percentiles_ref).map(([perc, value]) => $(`<li>${perc}: <b> ${value}</b></li>`))
						)
					)
				)
			}
			if (series.procedimiento) {
				$("div#general ul#general").append(
					$("<li></li>").append(
						$('<h3 id="p_proc">Procedimiento <button type=button title=editar id=procedimiento class="metadata-edit-button" style="display: none;"><i class="material-icons" id=procedimiento>&#xE254;</i></button></h3>'),
						$("<ul></ul>").append(
							$("<li>id: <b>" + series.procedimiento.id + "</b></li>"),
							$("<li>nombre: <b>" + series.procedimiento.nombre + "</b></li>"),
							$("<li>abreviatura: <b>" + series.procedimiento.abrev + "</b></li>"),
							$("<li>descripción: <b>" + series.procedimiento.descripcion + "</b></li>")
				)))
			}
			if (series.unidades) {
				$("div#general ul#general").append(
					$("<li></li>").append(
						$('<h3 id="p_units">Unidades <button type=button title=editar id=unidades class="metadata-edit-button" style="display: none;"><i class="material-icons" id=unidades>&#xE254;</i></button></h3>'),
						$("<ul></ul>").append(
							$("<li>id: <b>" + series.unidades.id + "</b></li>"),
							$("<li>nombre: <b>" + series.unidades.nombre + "</b></li>"),
							$("<li>abreviatura: <b>" + series.unidades.abrev + "</b></li>"),
							$("<li>unitsID: <b>" + series.unidades.unitsID + "</b></li>"),
							$("<li>unitsType: <b>" + series.unidades.unitsType + "</b></li>")
				)))
			}
			if (series.fuente) {
				$("div#general ul#general").append(
					$("<li></li>").append(
						$('<h3 id="p_units">Fuente <button type=button title=editar id=fuente class="metadata-edit-button" style="display: none;"><i class="material-icons" id=fuente>&#xE254;</i></button></h3>'),
						$("<ul></ul>").append(
							$("<li>id: <b>" + series.fuente.id + "</b></li>"),
							$("<li>nombre: <b>" + series.fuente.nombre + "</b></li>"),
							$("<li>tipo: <b>" + series.fuente.tipo + "</b></li>"),
							$("<li>scale_factor: <b>" + series.fuente.scale_factor + "</b></li>"),
							$("<li>data_offset: <b>" + series.fuente.data_offset + "</b></li>"),
							$("<li>abstract: <b>" + series.fuente.abstract + "</b></li>"),
							$("<li>source: <b>" + series.unidades.source + "</b></li>")
				)))
			}
			if (prono_resumen) {
				$("div#general ul#general").append(
					$("<li id=prono></li>").append(
						$('<h3 id="p_prono">Pronósticos (resumen)</h3>'),
						$("<ul></ul>").append(
							prono_resumen.map(p => {
								const cal_stats_li = (p.cal_stats) ? $("<li>Estadísticos: </li>").append(
									$("<ul></ul>").append(
										Object.keys(p.cal_stats).map(qualifier => 
											$(`<li>Qualifier: ${qualifier}</li>`).append(
												$("<ul></ul>").append(
													Object.keys(p.cal_stats[qualifier]).map(key=> {
														if((p.cal_stats[qualifier][key] == undefined)) {
															return $(`<li>
																${key}: null
																</li>`
															)
														} else if(["timestart","timeend"].indexOf(key) >= 0) {
															// string value
															return $(`<li>
																${key}: ${p.cal_stats[qualifier][key]}
																</li>`
															)
														} else if(["linear_regression"].indexOf(key) >= 0) {
															// object value
															return $(`<li>${key}</li>`).append(
																$("<ul></ul>").append(
																	Object.keys(p.cal_stats[qualifier][key]).map(k => 
																		$(`<li>
																			${k}: ${Math.round(p.cal_stats[qualifier][key][k] * 10000) / 10000}
																		</li>`)
																	)
																)
															)
														} else {
															// decimal value
															return $(`<li>
																${key}: ${Math.round(p.cal_stats[qualifier][key] * 10000) / 10000}
															</li>`)
														}													
													})
												)
											)
										)
									)
								) : ""							
								return $("<li></li>").append(
									$("<h4>" + p.nombre + "</h4>"),
									$("<ul></ul>").append(
										$("<li>id: <b>" + p.cal_id + "</b></li>"),
										$("<li>nombre: <b>" + p.nombre + "</b></li>"),
										$("<li>modelo: <b>" + p.modelo + "</b></li>"),
										$("<li>activado: <b>" + p.activar + "</b></li>"),
										$("<li>seleccionado: <b>" + p.selected + "</b></li>"),
										$("<li>id de corrida: <b>" + p.cor_id + "</b></li>"),
										$("<li>fecha de emisión: <b>" + p.forecast_date + "</b></li>"),
										$("<li>cantidad de registros: <b>" + p.count + "</b></li>"),
										$("<li>fecha final: <b>" + p.fecha_fin + "</b></li>"),
										cal_stats_li
								))
							})							
				)))
			} else {
				$("div#general ul#general").append(
					$("<li></li>").append(
						$('<h3 id="p_prono">No hay pronósticos</h3>')
				))
			}

			if({{writer}}) {  // habilita edición de metadatos
				$("button.metadata-edit-button").show().click(metadataEdit)
				$("div#myModalMetadata form#confirm").submit(onSubmitMetadataEdit)
				$("div#myModalMetadata").on('hide.bs.modal', function (e) {
					//~ $(e.target).find("div#estacion").hide()
					$(e.target).find(".edit").attr("disabled","disabled")
				})
			}


			// read selected station from 'geom' and add point layer to map

			gSeries.estacion.geoJSON = getGeomAsGeoJSON(series)

			var feature = (new ol.format.GeoJSON()).readFeatures(gSeries.estacion.geoJSON)
			if(gSeries.tipo == "areal") {
				global.map.getView().fit(feature[0].getGeometry(), {padding: [170, 50, 30, 150]})
				var symbolStyle = new ol.style.Style({
						stroke: new ol.style.Stroke({
						color: 'black',
						width: 3,
					}),
					fill: new ol.style.Fill({
						color: 'rgba(0, 0, 0, 0.1)',
					}),
					//~ size: 60
				})
				if(global.map.getView().getZoom() > 16) {
					global.map.getView().setZoom(8)
				}
			} else {
				global.map.getView().setCenter(feature[0].getGeometry().getCoordinates())
				global.map.getView().setZoom(8)
				var symbolStyle = new ol.style.Style({
					image: new ol.style.Icon({
						anchor: [0.5, 1],
						src: 'img/map_pin_small.png',
						//~ size: 60
					})
				});
			}
			var labelStyle = new ol.style.Style({
				text: new ol.style.Text({
				font: '10px Calibri,sans-serif',
				overflow: true,
				fill: new ol.style.Fill({
					color: '#000'
				}),
				stroke: new ol.style.Stroke({
					color: '#fff',
					width: 2
				})
				})
			});
			var layer = new ol.layer.Vector({
				source: new ol.source.Vector({
					projection: 'EPSG:4326',
					features: feature,
				}),
				style: function(feature) {
					labelStyle.getText().setText(feature.get('nombre'));
					return [labelStyle,symbolStyle];
				},
				zIndex: 10
			})
			global.map.addLayer(
				layer
			)
			// Descarga punto
			gblob = new Blob([JSON.stringify(gSeries.estacion.geoJSON)], {type: "octet/stream"}),
			gurl = window.URL.createObjectURL(gblob);
			$("#descargarPoint").attr('href',gurl).html('GeoJSON')
		
			// read time series from 'data' and load tables and chart
			series.request_params = getSeriesParams
			loadChart(series, null, "chart_container", {prono_table:"table_container_prono",dt:series.var.timeSupport}, loadChartCallback)

			// make obs edit table
			gSeries.timestart = $("form#selectorform input[name=timestart]").val()
			gSeries.timeend = $("form#selectorform input[name=timeend]").val()
			gSeries.reloadChart = function() {
				loadChart(this, null,"chart_container")
			}
			gSeries.sortObs = function() {
				this.observaciones.sort( (a,b)=>{
					if (new Date(a[0]) < new Date(b[0])) {
						return -1
					} else {
						return 1
					}
				})
			}
			global.series = gSeries
			makeObsEditTable($("div.tabcontent#tabla"),gSeries,{{writer}}) //series_def)

			// write REST API endpoints for data download (Descargas tab)
			var getRequestUrl = "getSeriesBySiteAndVar?series_id=" + series.id + "&tipo=" + series.tipo + "&timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" + timeend.toISOString().substring(0,10) + "&includeProno=true"; // "obs/puntual/series/" + series.id + "?timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" timeend.toISOString().substring(0,10)
			$("a#descargarJson").attr('href',getRequestUrl).text(getRequestUrl)
			var getObsCSVUrl = "obs/" + series.tipo + "/series/" + series.id + "/observaciones?" + "&timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" + timeend.toISOString().substring(0,10) + "&format=csv" // "getObservaciones?tipo=puntual&series_id=" + urlParams.get('seriesId') + "&timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" + timeend.toISOString().substring(0,10) + "&format=csv"
			$("a#descargarCSV").attr('href',getObsCSVUrl).text(getObsCSVUrl)
			var getObsCSVlessUrl = "obs/" + series.tipo + "/series/" + series.id + "/observaciones?" + "&timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" + timeend.toISOString().substring(0,10) + "&format=csvless&no_id=true" 
			$("a#descargarCSVless").attr('href',getObsCSVlessUrl).text(getObsCSVlessUrl)
			var getObsWaterml2Url = "obs/" + series.tipo + "/series/" + series.id + "?timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" + timeend.toISOString().substring(0,10) + "&format=waterml2" // "getObservaciones?tipo=puntual&series_id=" + urlParams.get('seriesId') + "&timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" + timeend.toISOString().substring(0,10) + "&format=csv"
			$("a#descargarWaterml2").attr('href',getObsWaterml2Url).text(getObsWaterml2Url)
			var getObsMnemosUrl = "obs/" + series.tipo + "/series/" + series.id + "?timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" + timeend.toISOString().substring(0,10) + "&format=mnemos" // "getObservaciones?tipo=puntual&series_id=" + urlParams.get('seriesId') + "&timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" + timeend.toISOString().substring(0,10) + "&format=csv"
			$("a#descargarMnemos").attr('href',getObsMnemosUrl).text(getObsMnemosUrl)
			var doystatsurl = "obs/" + series.tipo + "/series/" + series.id + "/estadisticosDiariosSuavizados" // getCuantilesDiariosSuavizados?tipo=puntual&series_id="+ series.id + "&format=json"
			$("a#descargarDoyStatsJSON").attr('href',doystatsurl).text(doystatsurl)
			var doystatsurlcsv = "obs/" + series.tipo + "/series/" + series.id + "/estadisticosDiariosSuavizados?format=csv" //"getCuantilesDiariosSuavizados?tipo=puntual&series_id="+ series.id + "&format=csv"
			$("a#descargarDoyStatsCSV").attr('href',doystatsurlcsv).text(doystatsurlcsv)
			var percentilesurl = "obs/" + series.tipo + "/series/" + series.id + "/percentilesDiarios" // "getPercentilesDiarios?series_id="+ series.id
			var monstatsurl = "obs/" + series.tipo + "/series/" + series.id + "/estadisticosMensuales?format=json"
			$("a#descargarMonStatsJSON").attr('href',monstatsurl).text(monstatsurl)
			var monstatsurlcsv = "obs/" + series.tipo + "/series/" + series.id + "/estadisticosMensuales?format=csv"
			$("a#descargarMonStatsCSV").attr('href',monstatsurlcsv).text(monstatsurlcsv)
			var percentilesurl = "obs/" + series.tipo + "/series/" + series.id + "/percentilesDiarios" // "getPercentilesDiarios?series_id="+ series.id
			$("a#descargarPercentiles").attr('href',percentilesurl).text(percentilesurl)
			var percentilesurlcsv = "obs/" + series.tipo + "/series/" + series.id + "/percentilesDiarios?format=csv" // "getPercentilesDiarios?series_id="+ series.id + "&format=csv"
			$("a#descargarPercentilesCSV").attr('href',percentilesurlcsv).text(percentilesurlcsv)
			var percentilesDiariosBetweenDatesurl = "obs/" + series.tipo + "/series/" + series.id + "/percentilesDiarios/" +  timestart.toISOString().substring(0,10) + "/" + timeend.toISOString().substring(0,10) // "getPercentilesDiariosBetweenDates?tipo=puntual&series_id="+series.id+ "&timestart=" + timestart.toISOString().substring(0,10) + "&timeend=" + timeend.toISOString().substring(0,10) + "&percentil="
			$("a#descargarPercentilesDiariosBetweenDates").attr('href',percentilesDiariosBetweenDatesurl).text(percentilesDiariosBetweenDatesurl)
			const gmd_url = `obs/${series.tipo}/series/${series.id}?format=gmd`
			$("a#descargarGmd").attr('href',gmd_url).text(gmd_url)
		}).fail( (xhr, status, e)=>{
			console.error(e)
		})
	}
	
	// chart button .downld-pronos action
	$("div.tabcontent#grafico").find("button.downld-pronos").on('click', function () {
		getPronosJsonUrl()
	});
	
	// add series to chart form 
	
	$("form#chooseaddseries").submit(chooseAddSeries)

	// add percentile(s) to chart

	$("form#choosepercentile").submit(choosePercentile)
	
	function loadChartCallback(table_container, chart_container, table_prono,series) {
		$('a[data-toggle="tab"]#charttab').on('shown.bs.tab', function (e) {
			$("#chart_container").highcharts().reflow()
		})
		//~ $('a[data-toggle="tab"]#tabletab').click(e=>{
			//~ table_container.columns.adjust.draw()
		//~ })
		if(table_prono) {
			$('a[data-toggle="tab"]#tablepronotab').click(e=>{
				setTimeout(()=>{
					table_prono.columns.adjust().draw()
				},200)
			})
		}
		// console.log("enable chart buttons")
		// enable chart buttons
		$("div.tabcontent#grafico").find("button.add-series").prop('disabled',false)
		.on('click', function () {
			$("#chart_container").parent().find("div#chartModal").show().modal()
		});
		$("div.tabcontent#grafico").find("button.remove-series").prop('disabled',false)
		.on('click', function () {
			var chart = $("#chart_container").highcharts()
			if(chart.series.length == 0) {
				return
			}
			global.extra_series[chart.series[chart.series.length-1].name] = undefined
			chart.series[chart.series.length-1].remove(true)
			if(chart.series.length == 0) {  // remove horizontal lines when main series is removed
				console.log("removing horizontal lines")
				var pl=[]
				chart.yAxis[0].plotLinesAndBands.forEach(i=>{
					console.log(i)
					pl.push(i.id)
				})
					//~ console.log(pl)
				for(var i=1;i<pl.length;i++) {
						//~ console.log("removing plotline "+ i)
					chart.yAxis[0].removePlotLine( i )
				}
				}
				adjustChartAxes(chart)
		});
		// enable prono buttons
		var pronosticos_filtered = []
		if(series.pronosticos) {
			series.pronosticos.filter(p=>p.corrida).filter(p=>p.corrida.series).forEach(p=> {
				p.corrida.series.forEach(s=>{
					var prono = p
					prono.name = (p.nombre) ? p.nombre : (p.modelo) ? p.modelo : (p.id) ? "cal_id:" + p.id : "pronóstico";
					prono.name += "(" + s.qualifier + ")"
					pronosticos_filtered.push(prono)
				})
			})
		}
		if(pronosticos_filtered.length>0) {
			$("div.tabcontent#grafico").find("button.toggle-pronos").prop('disabled',false)
			.on('click', function () {
				var chart = $("#chart_container").highcharts()
				chart.series.forEach(s=>{  
					if(pronosticos_filtered.some(p=> p.name == s.name)) {
						if(s.visible) {
							s.hide()
						} else {
							s.show()
						}
					}
				})
			});
			$("div.tabcontent#grafico").find("button.downld-pronos").prop('disabled',false)
		}
		
		// enable stats buttons
		const has_ukceh_percentiles = Boolean(series.monthlyStats && series.monthlyStats.length && series.monthlyStats[0].p87 !== undefined && series.monthlyStats[0].p87 !== null)
		const stats_button_states = 
		(series.monthlyStats && series.monthlyStats.length) ? 
			(series.percentiles_ref && Object.keys(series.percentiles_ref).length) ? 
				(has_ukceh_percentiles) ? 
					["monthly","monthly_ukceh","yearly","both","none"] : 
					["monthly","yearly","both","none"] 
				: (has_ukceh_percentiles) ? 
					["monthly","monthly_ukceh","none"]
				    : ["monthly","none"] 
			: (series.percentiles_ref && Object.keys(series.percentiles_ref).length) ? 
				["yearly","none"] 
				: []
		if (stats_button_states.length) {
			var stats_button_state = stats_button_states[0] 
			//~ console.log("enable Stats buttons")
			$("div.tabcontent#grafico").find("button.toggle-stats").prop('disabled',false)
			.on('click', function () {
				stats_button_state = getNextValue(stats_button_states, stats_button_state)
				var chart = $("#chart_container").highcharts()
				if(stats_button_state == "monthly" || stats_button_state == "both") {
					chart.series.forEach(s=>{  
						if(/^permanencia\s(?:1|10|50|90|99)\%$/.test(s.name)) {
							// if(s.visible) {
							//	s.hide()
							//} else {
								s.show()
							//}
						}
					})
				} else {
					chart.series.forEach(s=>{  
						if(/^permanencia\s(?:1|10|50|90|99)\%$/.test(s.name)) {
							s.hide()
						}
					})
				}
				if(stats_button_state == "yearly" || stats_button_state == "both") {
					togglePercLines(series,chart,"show")
				} else {
					togglePercLines(series,chart,"hide")
				}
				if(stats_button_state == "monthly_ukceh") {
					chart.series.forEach(s=>{  
						if(/^permanencia\s(?:13|28|72|87)\%$/.test(s.name)) {
							// if(s.visible) {
							//	s.hide()
							//} else {
								s.show()
							//}
						}
					})
				} else {
					chart.series.forEach(s=>{  
						if(/^permanencia\s(?:13|28|72|87)\%$/.test(s.name)) {
							s.hide()
						}
					})
				}
			});
			if(stats_button_states.indexOf("monthly") >= 0 || stats_button_states.indexOf("both") >= 0) {
				$("div.tabcontent#grafico").find("button.downld-stats").prop('disabled',false)
				.on('click', function () {
					var chart = $("#chart_container").highcharts()
					var doystatsseries = chart.series.filter(s=> /^permanencia\s\d\d?\%$/.test(s.name))
					if(doystatsseries.length == 0) {
						console.log("nothing to download")
						return
					}
					var doystats = doystatsseries[0].data.map( (d,i) => {
						var date = new Date(d.x).toISOString().substring(0,10)
						var values = doystatsseries.map(s=> {
							return s.data[i].y
						})
						return [date,...values]	
					})
					var colnames = ["date",...doystatsseries.map(s=>s.name)]
					var csv = colnames.join(",") + "\n" + doystats.map(d=>d.join(",")).join("\n")
					var gblob = new Blob([csv], {type: "octet/stream"})
					var gurl = window.URL.createObjectURL(gblob);
					$("#myModal span#exportcsv a").attr({'href':gurl,download:'stats.csv'}).html("Descargar CSV").on("click", e=>{
						//~ $("#myModal").modal("hide")
					})
					$("#myModal span#exportjson input#exportjsonurl").val(window.location.origin + window.location.pathname.replace(/[^/]*$/,"") + "obs/puntual/series/" + gSeries.id + "/estadisticosMensuales?format=json").removeAttr("disabled")
					$("div#myModal span#exportcsv").show()
					$("div#myModal span#exportjson").show()
					$("div#myModal div#authentication").hide()
					$("div#myModal div#authentication input").attr("disabled",true)
					$("div#myModal").modal('show').on('hide.bs.modal', function (e) {
						$(e.target).find("span#exportcsv").hide()
						$(e.target).find("span#exportjson").hide()
						$(e.target).find("span#exportcsv a").attr({"href":null,download:'observaciones.csv'})
						$("#myModal span#exportjson input#exportjsonurl").val("").attr("disabled","disabled")
						$(e.target).find("div#authentication").show()
						$(e.target).find("div#authentication input").attr("disabled",false)
					})
				});
				$("div.tabcontent#grafico").find("button.add-percentile").prop('disabled',false)
				.on('click', function () {
					$("div#chartModal2").modal('show').on('hide.bs.modal', function (e) {
						$(e.target).find("select[name=percentil]").val([])
					})
				});
				$("div.tabcontent#grafico").find("button.downld-percentile")
				.on('click', function () {
					var chart = $("#chart_container").highcharts()
					var percentile_series = chart.series.filter(s=> /^percentil\s0\.\d\d?$/.test(s.name))
					if(percentile_series.length == 0) {
						console.log("Nothing to download")
						return
					}
					var percentiles = percentile_series[0].data.map( (d,i) => {
						var date = new Date(d.x).toISOString().substring(0,10)
						var values = percentile_series.map(s=> {
							return s.data[i].y
						})
						return [date,...values]	
					})
					var colnames = ["date",...percentile_series.map(s=>s.name)]
					var csv = colnames.join(",") + "\n" + percentiles.map(d=>d.join(",")).join("\n")
					var gblob = new Blob([csv], {type: "octet/stream"})
					var gurl = window.URL.createObjectURL(gblob);
					$("#myModal span#exportcsv a").attr({'href':gurl,download:'percentiles.csv'}).html("Descargar CSV");
					//~ .on("click", e=>{
						//~ $("#myModal").modal("hide")
					//~ })
					var percentil = percentile_series.map(s=>{
						return parseFloat(s.name.replace(/^percentil\s/,""));
					}).join(",")
					$("#myModal span#exportjson input#exportjsonurl").val(window.location.origin + window.location.pathname.replace(/[^/]*$/,"") + "obs/puntual/series/" + global.series.id + "/percentilesDiarios/" + global.series.timestart + "/" + global.series.timeend+ "?inverted=true&percentil=" + percentil).removeAttr("disabled")
					$("div#myModal span#exportcsv").show()
					$("div#myModal span#exportjson").show()
					$("div#myModal div#authentication").hide()
					$("div#myModal div#authentication input").attr("disabled",true)
					$("div#myModal").modal('show').on('hide.bs.modal', function (e) {
						$(e.target).find("span#exportcsv").hide()
						$(e.target).find("span#exportjson").hide()
						$(e.target).find("span#exportcsv a").attr({"href":null,download:'observaciones.csv'})
						$("#myModal span#exportjson input#exportjsonurl").val("").attr("disabled","disabled")
						$(e.target).find("div#authentication").show()
						$(e.target).find("div#authentication input").attr("disabled",false)
					})
				});
			}
		}

		$("form#choosepercentile input[name=series_id]").val(series.id)

		return
	}

	function getFuentesPuntual(search_filters) {
		$.get("obs/puntual/fuentes",undefined)
		.then(data=>{
			var redes_options_metadata = ""
			var redes_options = data.map(red=>{
				var selected = (search_filters.redId) ? (red.id == search_filters.redId) ? "selected" : "" : ""
				redes_options_metadata += '<option value="' + red.tabla_id + '" ' + selected + '>' + red.nombre + '(' + red.tabla_id + ' - ' + red.id + ')</option>'
				return "<option value=" + red.id + " " + selected + ">" + red.nombre + "(" + red.tabla_id + " - " + red.id + ")</option>"
			}).join("")
			//~ console.log({redes_options:redes_options})
			$("form#selectorform select[name=redId]").append($(redes_options)).change(event=>{
				// $(event.target).parents("form").submit()
				loadEstacionesOptions(loadEstacionesOptions)
			})
			$("div#myModalMetadata div#estacion select[name=tabla]").append($(redes_options_metadata))
			metadataElements.estacion.properties.tabla.options = redes_options_metadata
		})
		.fail( (xhr, status, e)=>{
			console.error(e)
		})
	}

	function getFuentesAreal(search_filters) {
		$.get("obs/areal/fuentes",undefined)
		.then(data=>{
			var fuentes_options_metadata = ""
			var fuentes_options = data.map(fuente=>{
				var selected = (search_filters.fuentesId) ? (fuente.id == search_filters.fuentesId) ? "selected" : "" : ""
				fuentes_options_metadata += '<option value="' + fuente.nombre + '" ' + selected + '>' + fuente.nombre + '(' + fuente.id + ')</option>'
				return "<option value=" + fuente.id + " " + selected + ">" + fuente.nombre + "(" + fuente.id + ")</option>"
			}).join("")
			//~ console.log({redes_options:redes_options})
			$("form#selectorform select[name=fuentesId]").append($(fuentes_options))
			// .change(event=>{
				// $(event.target).parents("form").submit()
				//loadAreasOptions()
			// })
			$("div#myModalMetadata div#serie select[name=fuentes_id]").append($(fuentes_options_metadata))
			// metadataElements.seriesAreales.properties.fuente.options = fuentes_options_metadata
			setSeriesTypeMode()
		})
		.fail( (xhr, status, e)=>{
			setSeriesTypeMode()
			console.error(e)
		})
	}

	function loadAreasOptions() {
		console.debug("load areas options")
		$("form#selectorform select[name=estacionId]")
		.empty()
		.append(
			$(
				'<option>',
				{
					value: ""
				}
			)
		)			
		$("body").css("cursor","progress")
		const search_filters = getSearchFilters()
		var estaciones_params = {
			fuentes_id: search_filters.fuentesId,
			var_id: search_filters.varId,
			no_geom: true
		}
		// console.log({estaciones_params:estaciones_params})
		$.get("obs/areal/series",estaciones_params)
		.then(data=>{
			$("body").css("cursor","default")
			if(!data.rows.length) {
				alert("No se encontraron series para la fuente y variable solicitada")
				return
			}
			var estaciones_options = {}
			for(var serie of data.rows) {
				if(estaciones_options.hasOwnProperty(serie.estacion.id)) {
					// skip duplicate
					continue
				}
				var selected = (search_filters.estacionId) ? (serie.estacion.id == search_filters.estacionId) ? "selected" : "" : ""
				estaciones_options[serie.estacion.id] = "<option value=" + serie.estacion.id + " " + selected + ">" + (serie.estacion.nombre ?? "") + "(" + ( (serie.estacion.exutorio) ? serie.estacion.exutorio.tabla : "") + " - " + serie.estacion.id + ")</option>"
			}
			estaciones_options = Object.keys(estaciones_options).map(k=>estaciones_options[k]).join("")
			//~ console.log({redes_options:redes_options})
			$("form#selectorform select[name=estacionId]")
			.append($(estaciones_options))
		})
		.fail( (xhr, status, e)=>{
			$("body").css("cursor","default")
			console.error(e)
		})
	}

	function loadEstacionesOptions(search_filters) {
		$("form#selectorform select[name=estacionId]")
		.empty()
		.append($('<option value="" ></option>'))
		$("body").css("cursor","progress")
		var estaciones_params = {}
		var selected_redId = $("form#selectorform select[name=redId]").val()
		if(selected_redId != "") {
			estaciones_params["fuentes_id"] = selected_redId
		} else if(search_filters.redId) {
			estaciones_params["fuentes_id"] = search_filters.redId
		}
		$.get("obs/puntual/estaciones",estaciones_params)
		.then(data=>{
			$("body").css("cursor","default")
			var estaciones_options = data.map(estacion=>{
				var selected = (search_filters.estacionId) ? (estacion.id == search_filters.estacionId) ? "selected" : "" : ""
				return "<option value=" + estacion.id + " " + selected + ">" + estacion.nombre + "(" + estacion.tabla + " - " + estacion.id + ")</option>"
			}).join("")
			//~ console.log({redes_options:redes_options})
			$("form#selectorform select[name=estacionId]")
			.append($(estaciones_options))
		})
		.fail( (xhr, status, e)=>{
			$("body").css("cursor","default")
			console.error(e)
		})
	}
	function getCalibradosGrupos(search_filters) {
		$.get("sim/calibrados_grupos",undefined)
		.then(data=>{
			var cg_options = data.map(g=>{
				var selected = (search_filters.cal_grupo_id) ? (g.id == search_filters.cal_grupo_id) ? "selected" : "" : ""
				return '<option value="' + g.id + '" ' + selected + '>' + g.id + " - " + g.nombre + '</option>'
			}).join("")
			$("form#selectorform select[name=cal_grupo_id]").append($(cg_options)).change(event=>{
				$(event.target).parents("form").submit()
			})
		})
		.fail( (xhr, status, e)=>{
			console.error(e)
		})
	}

	function getCalibrados(search_filters) {
		var cal_filter = {no_metadata:true,group_by_cal:true}
		if(search_filters.cal_grupo_id) {
			cal_filter.cal_grupo_id = search_filters.cal_grupo_id
		}
		$.get("sim/calibrados",cal_filter)
		.then(data=>{
			var c_options = data.map(c=>{
				var selected = ""
				if (search_filters.cal_id && c.id == search_filters.cal_id) {
					selected = "selected"
					getForecastDates(c.id,search_filters)
				}
				return '<option value="' + c.id + '" ' + selected + '>' + c.id + " - " + c.nombre + '</option>'
			}).join("")
			// console.log({c_options:c_options})
			$("form#selectorform select[name=cal_id]").append($(c_options)).change(event=>{
				$(event.target).parents("form").submit()
			})
		})
		.fail( (xhr, status, e)=>{
			console.error(e)
		})
	}

	function getForecastDates (cal_id,search_filters) {
		$.get("sim/calibrados/" + cal_id + "/corridas")
		.then(data=>{
			var fd_options = data.map(corrida=>corrida.forecast_date).sort((a,b)=>b-a).map(fd=>{
				var selected = ""
				if(search_filters.forecast_date && fd == search_filters.forecast_date) {
					selected = "selected"
				}
				return '<option value="' + fd + '" ' + selected + '>' + fd + '</option>'
			}).join("")
			$("form#selectorform select[name=forecast_date]").append($(fd_options)).change(event=>{
				$(event.target).parents("form").submit()
			})
			global.show_forecast_date = true
			$("div.prono-group2").show()
		})
	}

	function mapOnSingleClick(evt) {
		$('div.popover').remove()
		if($("input#toggleDraw").prop("checked")) {
			return
		}
		var pixel = evt.pixel
		var coordinate = evt.coordinate
		var viewparams = global.estaciones_wms_layer.getSource().getParams()["viewparams"]
		var bbox = {
			west: evt.coordinate[0] - global.map.getView().getResolution() * 10,
			south: evt.coordinate[1] - global.map.getView().getResolution() * 10,
			east: evt.coordinate[0] + global.map.getView().getResolution() * 10,
			north: evt.coordinate[1] + global.map.getView().getResolution() * 10
		}
		var bbox_string = Object.keys(bbox).map(key=>{
			return `${key}:${bbox[key]}`
		}).join(";")
		viewparams += `;${bbox_string}`
		var url = global.estaciones_wms_layer.getSource().getFeatureInfoUrl(
          evt.coordinate, global.map.getView().getResolution(), global.map.getView().getProjection(),
          {
			'INFO_FORMAT': 'application/json',
			'LAYERS': global.estaciones_wms_layer.getSource().getParams()["LAYERS"],
			'VIEWPARAMS': viewparams
           // 'propertyName': 'formal_en'
		});
		if(url) {
			console.log(url)
			$.get(url)
			.then(result=>{
				features = result.features
			//	{{!-- global.map.getFeaturesAtPixel(pixel, {layerFilter:function(layerCandidate) {
//				if(layerCandidate.getZIndex() == 1) {
//					return true
//				} else {
//					return false
//				}
//			}, hitTolerance: 10}) --}}
				global.content.innerHTML = "<h4>Estaciones</h4><table><tbody><thead><tr><th>fuente</th><th>id</th><th>nombre</th><th>variable</th><th>series_id</th><th>obs</th><th>sim</th></tr></thead></tbody></table>"
				for(var f of features) {
					var series = JSON.parse(f.properties.series)
					for(var s of series) {
						var data_availability = s.data_availability
						var bgcolor = "#ffffff"
						var outline = null
						var obs = "no"
						var sim = "no"
						var fontColor = "white"
						if(data_availability !== null) {
							// if(parseInt(dataAvailability).toString() != "NaN") {
							obs = (data_availability >= 8) ? "RT" : (data_availability >= 6) ? "NRT" : (data_availability >= 4) ? "C" : (data_availability >= 2) ? "H" : ""
							sim = (data_availability % 2 == 1) ? "S" : ""
							var data_availability_string = (obs != "") ? (sim != "") ? `${obs}+${sim}` : `${obs}` : (sim != "") ? `${sim}` : "N"
							if(obs == "") {
								obs = "no"
							}
							if(sim == "") {
								sim = "no"
							} else {
								sim = "sí"
							}
							// } else {
							// 	obs = (["H","C","NRT","RT","H+S","C+S","NRT+S","RT+S"].indexOf(data_availability) >= 0) ? "sí" : "no"
							// 	sim = /\+S$/.test(data_availability) ? "sí" : "no"
							// 	var data_availability_string = data_availability
							// }
							
							if(stylePars[data_availability_string]) {
								bgcolor = "#" + stylePars[data_availability_string].fill.map(c=> rgbToHex(c)).join("").substring(0,6)
								outline = '3px solid #' + stylePars[data_availability_string].stroke.map(c=> rgbToHex(c)).join("").substring(0,6)
								fontColor = stylePars[data_availability_string].fontColor
							} 
						}
						console.log("append row: " + s.id + ", " + f.properties.nombre)
						$("div#popup-content table tbody").append(
							$("<tr></tr>")
								.attr("id",s.id)
								.attr("name",f.properties.nombre)
								.attr({"data-toggle":"popover", "data-placement":"top", "title": "acción"})
								.css({'background-color': bgcolor, 'outline': outline, 'outline-offset':"-3px", 'color': fontColor})
								.append(
									$("<td></td>").text(f.properties.tabla),
									$("<td></td>").text(f.properties.estacion_id),
									$("<td></td>").text(f.properties.nombre),
									$("<td></td>").text(s.var.nombre),
									$("<td></td>").text(s.id),
									$("<td></td>").text(obs),
									$("<td></td>").text(sim)
								)
						)
							// $("<tr id=" + s.id + " name=\"" + f.properties.nombre + "\"><td>" + f.properties.tabla + "</td><td>" + f.properties.estacion_id + "</td><td>" + f.properties.nombre + "</td><td>" + s.var.nombre + "</td><td>" + s.id + "</td><td>"+obs+"</td><td>"+sim+"</td></tr>")
							// .css({'background-color': bgcolor, 'outline': outline, 'outline-offset':"-3px", 'color': fontColor})
							// .attr({"data-toggle":"popover", "data-placement":"top", "title": "acción"})
							//~ .on('click',function(evt) {
								//~ $('div#popup-content tr[data-toggle="popover"]').popover('dispose')
							//~ })
						// )
					}
				}
				$('div#popup-content tr[data-toggle="popover"]').popover({
					html: true,
					template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
					trigger: "click",
					content: function() {
						return "<div class=popovercontent id="+$(this).attr('id')+"></div>"
					}
				})
				.on('show.bs.popover', function (evt) {
					$('div#popup-content tr[data-toggle="popover"][id!='+$(evt.target).attr('id')+']').popover('hide')
				})
				.on('shown.bs.popover', function (evt) {
					console.log("popover shown")
					$("div#"+$(evt.target).attr('id')+".popovercontent").empty().append(
						$("<button>Ir a serie</button>").attr({
							id: $(evt.target).attr('id')
						}).on('click',reloadWithPars)						
					)
					if($("div#chart_container")[0].hasAttribute("data-highcharts-chart")) {
						$("div#"+$(evt.target).attr('id')+".popovercontent").append(
							$("<button>Agregar a gráfico</button>").attr({
								id: $(evt.target).attr('id'),
								name: $(evt.target).attr('name')
							}).on('click',addToChart)
						)
					}
				})
				global.overlay.setPosition(coordinate)
			})
			.fail(e=>{
				console.error(e)
				alert(e.toString())
			})
		} else {
			console.error("Failed to get getFeatureInfo url")
		} 
		
	}

	function mapOnSingleClickClientSide(evt) {
		$('div.popover').remove()
		if($("input#toggleDraw").prop("checked")) {
			return
		}
		var pixel = evt.pixel
		var coordinate = evt.coordinate
		var features = global.map.getFeaturesAtPixel(pixel, {layerFilter:function(layerCandidate) {
				if(layerCandidate.getZIndex() == 1) {
					return true
				} else {
					return false
				}
			}, hitTolerance: 10})
		global.content.innerHTML = "<h4>Estaciones</h4><table><tbody><thead><tr><th>fuente</th><th>id</th><th>nombre</th><th>variable</th><th>series_id</th><th>obs</th><th>sim</th></tr></thead></tbody></table>"
		features.map(f=>{
			var data_availability = f.get('data_availability')
			var bgcolor = "#ffffff"
			var outline = null
			var obs = "no"
			var sim = "no"
			var fontColor = "white"
			if(data_availability) {
				obs = (data_availability.indexOf("H") > -1  || data_availability.indexOf("C") > -1 || data_availability.indexOf("T") > -1 ) ? data_availability.replace(/\+.*$/,"") : "no"
				sim = (data_availability.indexOf("S") > -1) ? "sí" : "no"
				if(stylePars[data_availability]) {
					bgcolor = "#" + stylePars[data_availability].fill.map(c=> rgbToHex(c)).join("").substring(0,6)
					outline = '3px solid #' + stylePars[data_availability].stroke.map(c=> rgbToHex(c)).join("").substring(0,6)
					fontColor = stylePars[data_availability].fontColor
				} 
			}

			// console.log("append row: " + f.get('series_id') + ", " + f.get('nombre'))
			$("div#popup-content table tbody").append(
				$("<tr></tr>")
					.attr("id",f.get('series_id'))
					.attr("name",f.get('nombre'))
					.attr({"data-toggle":"popover", "data-placement":"top", "title": "acción"})
					.css({'background-color': bgcolor, 'outline': outline, 'outline-offset':"-3px", 'color': fontColor})
					.append(
						$("<td></td>").text(f.get('fuente')),
						$("<td></td>").text(f.get('estacion_id')),
						$("<td></td>").text(f.get('nombre')),
						$("<td></td>").text(f.get('var_nombre')),
						$("<td></td>").text(f.get('series_id')),
						$("<td></td>").text(obs),
						$("<td></td>").text(sim)
					)
			)
			// $("div#popup-content table tbody").append(
			//	$("<tr id=" + f.get('series_id') + "><td>" + f.get('fuente') + "</td><td>" + f.get('estacion_id') + "</td><td>" + f.get('nombre') + "</td><td>" + f.get('var_name') + "</td><td>" + f.get('series_id') + "</td><td>"+obs+"</td><td>"+sim+"</td></tr>")
			//	.css({'background-color': bgcolor, 'outline': outline, 'outline-offset':"-3px", 'color': fontColor})
			//	.attr({"data-toggle":"popover", "data-placement":"top", "title": "acción"})
				//~ .on('click',function(evt) {
					//~ $('div#popup-content tr[data-toggle="popover"]').popover('dispose')
				//~ })
			//)
		})
		$('div#popup-content tr[data-toggle="popover"]').popover({
			html: true,
			template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>',
			trigger: "click",
			content: function() {
				return "<div class=popovercontent id="+$(this).attr('id')+" name="+$(this).attr('name')+"></div>"
			}
		})
		.on('show.bs.popover', function (evt) {
			$('div#popup-content tr[data-toggle="popover"][id!='+$(evt.target).attr('id')+']').popover('hide')
		})
		.on('shown.bs.popover', function (evt) {
			console.log("popover shown")
			$("div#"+$(evt.target).attr('id')+".popovercontent").empty().append(
				$("<button>Ir a serie</button>").attr({
					id: $(evt.target).attr('id')
				}).on('click',reloadWithPars)						
			)
			if($("div#chart_container")[0].hasAttribute("data-highcharts-chart")) {
				$("div#"+$(evt.target).attr('id')+".popovercontent").append(
					$("<button>Agregar a gráfico</button>").attr({
						id: $(evt.target).attr('id'),
						name: $(evt.target).attr('name')
					}).on('click',addToChart)
				)
			}
		})
		global.overlay.setPosition(coordinate)
	}

	function mapOnPointerMove(evt) {
		if (!evt.dragging) {
			if(global.map.hasFeatureAtPixel(global.map.getEventPixel(evt.originalEvent))) {
				global.map.getTargetElement().style.cursor = 'pointer';
				var features = global.map.getFeaturesAtPixel(global.map.getEventPixel(evt.originalEvent),{layerFilter:function(layerCandidate) {
					if(layerCandidate.getZIndex() == 1) {
						return true
					} else {
						return false
					}
				}, hitTolerance: 10})
				if(features.length>0) {
					feature = features[0]
					$("div#popup-content2").text(feature.get("nombre") + " (" + feature.get("estacion_id") + ")")
					global.container2.setPosition(evt.coordinate);
					$("#popup2").show()
				}
			} else {
				global.map.getTargetElement().style.cursor = '';
				$("#popup2").hide()
			}
		}
	}
	function loadPointsNextPage(next_page_url,old_points,sourceEstaciones,writer,search_filters={}) {
		console.log("Load points next page:" + next_page_url)
		$("button#refresh").attr("disabled","disabled")
		$("body").css("cursor","progress")
		$.get(next_page_url)
		.then(points=>{
			$("body").css("cursor","default")
			if(!points || !points.features) {
				alert("0: No se encontraron series")
			} else if (points.features.length == 0) {
				alert("1: No se encontraron series")
			}
			$("button#refresh").removeAttr("disabled")
			// old_points.push(...points.features)
			// gPoints.push(...points.features)
			// read points from GeoJSON and add features to layer
			if(points.features.length) {
				var featEstaciones = (new ol.format.GeoJSON()).readFeatures(points)
				sourceEstaciones.addFeatures(featEstaciones)
				if(points.next_page_url) {
					loadPointsNextPage(points.next_page_url,points,sourceEstaciones,writer,search_filters)
				}
			}
			/*
			// llena tabla de series
			addSeriesEditTable($("div.tabcontent#tabla_series"),points,writer)
			var flag=false
			var matched_point
			var table_rows = []
			var options = points.features.map(p=>{
				var selected=false
				if(search_filters.seriesId) {
					if(p.properties.series_id == search_filters.seriesId) {
						//~ console.log(p.properties)
						flag=true
						selected=true
						matched_point=p
					}
				} 
				var name = p.properties.estacion_id + ": " + ((p.properties.rio) ? p.properties.rio + "@" : "") + ((p.properties.nombre) ? p.properties.nombre.substring(0,30) : p.properties.estacion_id) + " (" + p.properties.var_name + ") [" + p.properties.series_id + "]"
				return "<option value="+p.properties.series_id + " " + ((selected) ? "selected" : "" ) + " >" + name + "</option>"
			})
			$("select#seriesId").append(options.join(""))
			$("form#chooseaddseries select[name=series_id]").append(options.join(""))
			*/
			
			/*
			if(!flag) {
				console.log("seriesId not found")
				return
			}
			var timestart, timeend
			if(!search_filters.timestart) {
				timestart = new Date()
				timestart.setDate(timestart.getDate() - 90)
			} else {
				timestart = new Date(search_filters.timestart)
				//~ console.log("timestart from querystring")
			}
			if(!search_filters.timeend) {
				timeend = new Date()
				timeend.setDate(timeend.getDate() +15)
			} else {
				timeend = new Date(search_filters.timeend)
				//~ console.log("timeend from querystring")
			}
			$("input#timestart").val(timestart.toISOString().substring(0,10))
			$("input#timeend").val(timeend.toISOString().substring(0,10))
			$("form#chooseaddseries input[name=timestart]").val(timestart.toISOString().substring(0,10))
			$("form#chooseaddseries input[name=timeend]").val(timeend.toISOString().substring(0,10))
			$("form#choosepercentile input[name=timestart]").val(timestart.toISOString().substring(0,10))
			$("form#choosepercentile input[name=timeend]").val(timeend.toISOString().substring(0,10))
			*/
		}).fail(e=>{
			$("body").css("cursor","default")
			alert(e.message)
		})
	}

	function getSearchFilters() {
		const search_filters = {}
		$("form#selectorform").serializeArray().forEach(item=>{
			search_filters[item.name] = item.value
		})
		return search_filters
	}
	
	function getEstacionesUrl() {
		const search_filters = getSearchFilters()
		if(search_filters.fuentesId != "") {
			return "obs/areal/series"
		} else {
			return "obs/puntual/series"
		}
	}

	function setSeriesTypeMode() {
		const search_filters = getSearchFilters()
		if(search_filters.fuentesId != "") {
			$("h3#leftHeading").text("Series areales")
			$("form#selectorform select[name=estacionId]").parent().find("label").text("Área")
			// loadAreasOptions(search_filters)
			$("form#selectorform select[name=redId]").parent().hide()
			$("form#selectorform select[name=fuentesId]").parent().removeClass("additionalFilters").show()
			$("form#chooseaddseries input[name=tipo]").val("areal")
		} else {
			$("h3#leftHeading").text("Series puntuales")
			$("form#selectorform select[name=estacionId]").parent().find("label").text("Estación")
			// loadAreasOptions(search_filters)
			$("form#selectorform select[name=redId]").parent().show()
			$("form#selectorform select[name=fuentesId]").parent().addClass("additionalFilters")
			$("form#chooseaddseries input[name=tipo]").val("puntual")
		} 
	}
	function getNextValue(arr, val) {
		var index = arr.indexOf(val)
		if(index >= 0 && index < arr.length - 1) {
			return arr[index + 1]
		} else {
			return arr[0]
		}
	}
</script>
<!--
<script src="https://unpkg.com/bootstrap-table@1.16.0/dist/bootstrap-table.min.js"></script>
-->
<script type="text/javascript" src="js/bootstrap-table.min.js"></script>

